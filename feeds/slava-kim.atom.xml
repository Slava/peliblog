<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Yet Another Dev Blog</title><link href="http://devblog.me/" rel="alternate"></link><link href="http://devblog.me/feeds/slava-kim.atom.xml" rel="self"></link><id>http://devblog.me/</id><updated>2015-02-14T00:00:00-08:00</updated><entry><title>Handlebars without data context</title><link href="http://devblog.me/no-data-context.html" rel="alternate"></link><updated>2015-02-14T00:00:00-08:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2015-02-14:no-data-context.html</id><summary type="html">&lt;p&gt;&lt;img alt="Handlebars" src="/images/handlebars.png" /&gt;&lt;/p&gt;
&lt;p&gt;In this post I am proposing a better way to write your Meteor templates. The
goal is to have more explicit variables and a scope similar to what you can see
in a regular JavaScript code.&lt;/p&gt;
&lt;h2&gt;A short history lesson&lt;/h2&gt;
&lt;p&gt;Handlebars - a popular templating language. At the time a web developer would
pick Handlebars to render their html pages. That was before the world of web
development moved to cilent-heavy templating and most application servers became
a dumb API layer for the database.&lt;/p&gt;
&lt;p&gt;For a person like me, who came to web dev a couple of years ago, little is known
about the dark time of 2010, when the project was born. Various evidence shows
that people were debating about "logicless templates" and good
"presentation/logic" separation. At the time, Handlebars have borrowed the
syntax from Mustache templates and introduced more syntax: constructs like &lt;code&gt;#if&lt;/code&gt;
and &lt;code&gt;#each&lt;/code&gt;, template helpers, compiled templates.&lt;/p&gt;
&lt;p&gt;The success of curly braces (&lt;code&gt;{{&lt;/code&gt;, &lt;code&gt;}}&lt;/code&gt;) propagated to the client-side
templating. Multiple projects has adapted the syntax and structure while
bringing some "life" to the braced expressions.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://emberjs.com/guides/templates/handlebars-basics/"&gt;Ember.js&lt;/a&gt;, &lt;a href="http://www.ractivejs.org/"&gt;Ractive&lt;/a&gt; and &lt;a href="https://www.meteor.com/blaze"&gt;Meteor's Blaze&lt;/a&gt; (and its
predecessor &lt;a href="https://github.com/meteor/meteor/tree/b39033c3c304feed47eb0600cb64ff8730318afe/packages/spark"&gt;Spark&lt;/a&gt;) all use the Handlebars syntax to create "Live HTML
templates" - templates changing the HTML page on the fly as the underlying data
model changes. That's it - if your JavaScript value changes, you can expect the
presentation constructed by your templates will change accordingly.&lt;/p&gt;
&lt;h2&gt;Handlebars at Meteor&lt;/h2&gt;
&lt;p&gt;A lot of efforts has been spent by the Meteor Core team to maintain a lot of the
syntax features and behaviors of Handlebars while making it more reactive and
"live".&lt;/p&gt;
&lt;p&gt;Around the time of arrival of &lt;a href="https://www.meteor.com/blaze"&gt;Blaze&lt;/a&gt;, Meteor's latest iteration of
reactive templates, the syntax started to diverge. The Meteor fork of the syntax
is called &lt;a href="https://github.com/meteor/meteor/tree/devel/packages/spacebars"&gt;"Spacebars"&lt;/a&gt;, similar to other front-end frameworks,
Spacebars enforce structured templates for fine-grained updates, some of the
features of Handlebars are dropped but most of the semantics remained the same.&lt;/p&gt;
&lt;h2&gt;Data context - the root of all confusion&lt;/h2&gt;
&lt;p&gt;One feature remained the same and that's the "data context". In Handlebars this
is the only way to pass data from template to template. "Data context" can be
accessed with &lt;a href="http://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it/"&gt;troublesome &lt;code&gt;this&lt;/code&gt; keyword&lt;/a&gt;. It is inherited by default on
templates inclusions, so it sneaks into everything; It is silent and the only
argument, it is also implicit.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;&amp;lt;template name=&amp;quot;people&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;  &lt;/span&gt;&lt;span class="c"&gt;{{!-- the data context here is { people: [...] } --}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;  &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;#each&lt;/span&gt; &lt;span class="nv"&gt;people&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="c"&gt;{{!-- the data context here is changed by #each and it is { name: ... } --}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;person&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;  &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;/each&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;template name=&amp;quot;person&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;  &lt;/span&gt;&lt;span class="c"&gt;{{!-- the data context here is expected to be an object --}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;  &lt;/span&gt;&lt;span class="c"&gt;{{!-- with fields &amp;#39;name&amp;#39; and &amp;#39;age&amp;#39; --}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;  &amp;lt;span&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;age&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As always, the confusion happens when the data context changes. Constructs like
&lt;code&gt;#each&lt;/code&gt; and &lt;code&gt;#with&lt;/code&gt; change the data context and often do it in such a way, that
you can't access the parent data unless you reside to a weird dotted syntax.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;#each&lt;/span&gt; &lt;span class="nv"&gt;people&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;  &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;#each&lt;/span&gt; &lt;span class="nv"&gt;favoriteFruits&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="c"&gt;{{!-- accessing the parent data with a weird ../ syntax --}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="c"&gt;{{!-- also using {{this}} to refer to the current data --}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;span&amp;gt;The favorite fruit of &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="err"&gt;..&lt;/span&gt;&lt;span class="nf"&gt;/name&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt; is &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;this&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;  &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;/each&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;/each&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The reason for such syntax is the concept of "paths" in Handlebars. So every
time you see a construct like &lt;code&gt;{{person.bio.homeTown}}&lt;/code&gt;, it is not a property
access - it is a path. This is why &lt;code&gt;{{../name}}&lt;/code&gt; construct makes sense if you
think of it as a path. In fact, an expression &lt;code&gt;{{.}}&lt;/code&gt; would be equivalent to
&lt;code&gt;{{this}}&lt;/code&gt; in Handlebars. Path is another confusing syntax feature that just
adds to the data context.&lt;/p&gt;
&lt;h2&gt;Data context is a dynamic variable&lt;/h2&gt;
&lt;p&gt;If you have a template &lt;code&gt;"person"&lt;/code&gt; and it displays a name and an age from the
current data context. What is the current data context? How do we know if there
are other fields on it that we can use in this template? It completely depends
on the template that includes the &lt;code&gt;"person"&lt;/code&gt; template.&lt;/p&gt;
&lt;p&gt;In other words, data context is just a dynamic variable, something that depends
on the chain of calls that led you to here, rather than the environment that
existed when your template was defined (lexical variable).&lt;/p&gt;
&lt;p&gt;Dynamic variables and dynamic scope are the programming language features from
60s and no other modern sane programming languages uses them as the main way to
refer to variables. In fact, if you search for materials online explaining
dynamic variables, most likely you will find something about Emacs Lisp or Bash
or Perl (the last two keep it for backwards compatibility).&lt;/p&gt;
&lt;p&gt;JavaScript has only one sort-of dynamic variable called &lt;code&gt;this&lt;/code&gt;. And guess what?
People are confused as hell by it. Thankfully, in JavaScript &lt;code&gt;this&lt;/code&gt; is not the
main way of passing arguments to a function. Unfortunately, in Handlebars it is
the only way.&lt;/p&gt;
&lt;p&gt;Similar to Handlebars' &lt;code&gt;{{#with}}&lt;/code&gt; JavaScript the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with"&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; keyword. Guess
what?  Every JS developer will tell you to never ever use it. It makes the code
confusing, it cripples the scope, it is a source of bugs, it is deprecated in
the strict mode.&lt;/p&gt;
&lt;h2&gt;Handlebars without data context&lt;/h2&gt;
&lt;p&gt;How would we get rid of the data context? Recently, I have been working on a
Pull Request to Meteor's Blaze to introduce a concept of lexical scope into the
templating language: &lt;a href="https://github.com/meteor/meteor/pull/3560"&gt;PR #3560 at
meteor/meteor&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;#let&lt;/h3&gt;
&lt;p&gt;First, let's introduce the notion of scope and tools to manipulate it. I thought
that the &lt;code&gt;let&lt;/code&gt; keyword would be appropriate here. It would be familiar to people
who have seen the &lt;code&gt;let&lt;/code&gt; form in Scheme and the &lt;code&gt;let .. in ..&lt;/code&gt; construct in ML.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nf"&gt;#let&lt;/span&gt; &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;person.bio.homeTown&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;person.name&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;  &amp;lt;div&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="c"&gt;{{!-- access newly introduced variables city and name in this let block --}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt; is from &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;city&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;!&lt;/span&gt;

&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="c"&gt;{{!-- still can access person from the scope above --}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    Get to know &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;person.name&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;.&lt;/span&gt;
&lt;span class="x"&gt;  &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nf"&gt;/let&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since templates are not a full-fledged programming language and their use is
usually simpler and limited, it makes sense to make these variables immutable.
That's it. They can be overshadowed by a different &lt;code&gt;{{#let}}&lt;/code&gt; but cannot be
changed. Their application is limited to their block and they don't leak to
other templates included within their block.&lt;/p&gt;
&lt;h3&gt;New #each&lt;/h3&gt;
&lt;p&gt;Now let's fix the most commonly used construct that relies on the dynamic data
context: &lt;code&gt;{{#each}}&lt;/code&gt;. The new &lt;code&gt;{{#each}}&lt;/code&gt; plays the game of lexical scoping and
introduces a new variable within its body representing the iteration variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;#each&lt;/span&gt; &lt;span class="nv"&gt;person&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;people&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;  &amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;person.name&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt; is from &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;person.bio.homeTown&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;.&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;/each&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;person&lt;/code&gt; as a variable makes a lot more sense to the reader than an unnamed
&lt;code&gt;this&lt;/code&gt;. This is very similar to what you would do in JavaScript:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// new scope, person is introduced&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Including templates with their scope as arguments&lt;/h3&gt;
&lt;p&gt;And lastly, let's make the template inclusion more descriptive to the reader:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;&amp;lt;template name=&amp;quot;person&amp;quot; args=&amp;quot;name age city&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;  &amp;lt;div&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    Everyone, meet &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;.&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt; is &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;age&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt; years old and is coming from &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;city&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;.&lt;/span&gt;
&lt;span class="x"&gt;  &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now the inclusion would look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;person&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;jack.name&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;jack.age&lt;/span&gt; &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;jack.bio.homeTown&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The syntax is a lot more verbose now but what we have here is just a set of
named arguments. Included template gets its own scope set to the passed
arguments, similar to a function in JavaScript that gets its own scope set to
its positional arguments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Everyone, meet &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.\n&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; years old and is coming from &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;city&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This already works in Blaze without any changes. The trick is, the same syntax
is used to set a custom data context. And if this is the only place where we use
data context, it can as well treated as a template-local scope.&lt;/p&gt;
&lt;p&gt;Arguments declared in the template open tag are optional but I think it makes it
very clear to anyone who is going to use this template in the future, what are
the expected arguments.&lt;/p&gt;
&lt;h2&gt;Try it out!&lt;/h2&gt;
&lt;p&gt;We are done! Following this pattern, I believe, your templates can become
easier to follow, less confusing to read and more explicit. The data context is
a legacy from Handlebars and I wish it would remain there.&lt;/p&gt;
&lt;p&gt;You can try using these features and this style as soon as my PR lands to a
release. You can also pull it from GitHub and play with it running Meteor from a
checkout.&lt;/p&gt;</summary></entry><entry><title>6.033 - An Introduction to Everything</title><link href="http://devblog.me/systems-class.html" rel="alternate"></link><updated>2014-10-18T00:00:00-07:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2014-10-18:systems-class.html</id><summary type="html">&lt;p&gt;&lt;img alt="a pixelated screenshot of the page I stared at the
most" src="/images/systems-logo.png" /&gt;&lt;/p&gt;
&lt;p&gt;6.033 is an MIT class that teaches basics of “Systems Engineering” and is
available online on MIT OCW for everyone. Recently I have finished watching the
lectures and doing the assignments and I can certainly say that I learnt a big
bunch from it.&lt;/p&gt;
&lt;h2&gt;"The Class"&lt;/h2&gt;
&lt;p&gt;At Meteor, a lot of people talk about 6.033 as of "the class everyone should
take". It is hard to overstate the amount of useful and practical knowledge one
can learn from this course. Some of my friends who have taken this class live at
the real MIT say, that it is "overrated". But I tend to agree with my peers -
6.033 teaches a broad list of topics with enough depth to be in use to anyone
who works in modern day tech industry.&lt;/p&gt;
&lt;h2&gt;Gained Ground&lt;/h2&gt;
&lt;p&gt;What is “Systems Engineering” anyway? What are systems? Doesn't any non-trivial
software eventually become a “system”? Building a system seems to be a natural
way to manage the complexity in an increasingly advanced project.  That's why
6.033 introduces students to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Client/Server architecture&lt;/li&gt;
&lt;li&gt;Operating Systems&lt;/li&gt;
&lt;li&gt;Concurrency and parallel computation&lt;/li&gt;
&lt;li&gt;Networks and the Internet&lt;/li&gt;
&lt;li&gt;Distributed systems&lt;/li&gt;
&lt;li&gt;Databases and transactions&lt;/li&gt;
&lt;li&gt;System security&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a long list of topics covered in about 24 hours of video lectures, two
dozens of papers, textbook chapters and assignments.  Notably, often the
material covered in lectures doesn't overlap much with the content of papers.&lt;/p&gt;
&lt;p&gt;Because this course covers so much ground, I am pretty sure that just taking
this one class will give anyone enough academic knowledge to work at most SV
web-startups positions.&lt;/p&gt;
&lt;h2&gt;Bedtime Stories&lt;/h2&gt;
&lt;p&gt;This class involves very little coding (only a bite for each assignment) and
lots and lots of reading. Reading textbooks, reading papers, reading essays and
reports. A lot of reading. Some of my peers at Meteor call it “the paper reading
class”.&lt;/p&gt;
&lt;p&gt;These amounts of text can be unusual to some people. An important skill to learn
here is how to skip paragraphs of text full of not so useful information,
skimming before reading. Also picking the right time for reading a paper is
important: a wall of words can easily knock one out to the bed.&lt;/p&gt;
&lt;p&gt;Don't hesitate looking out for more compact and better organized summaries about
the paper assigned in the class. By taking 6.033 online you would likely limit
yourself to just reading and notes taking without the recitations. Discussing
the key ideas with others might make a big difference, as well as reading
others’ opinions online.&lt;/p&gt;
&lt;h2&gt;The Longest Journey&lt;/h2&gt;
&lt;p&gt;My reading of the class began around November 2013. I was watching on average
one lecture a week. Each video lecture would take me around an hour to take
notes, each assignment would take between 20 and 50 minutes to accomplish. The
readings were tough and some especially boring papers would keep me stuck for
weeks without much progress - I procrastinated reading them a lot.&lt;/p&gt;
&lt;p&gt;I have finished everything except for the final projects (DP1, DP2) in the
beginning of October 2014. So 11 month for a class that would take an MIT
sophomore 1 semester (6 month) to pass. And my learnings were even easier since
there were no hard dates on quizzes and assignments and I skipped both design
projects all together.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/systems-progress.png" /&gt;&lt;/p&gt;
&lt;p&gt;I collected some data: to keep track of my progress, I would record every week I
would do something related to the class. You can clearly see how I was highly
motivated in the beginning and then got to break for the whole December. Later I
continued in January and then got busy on work. After February, March and April,
I got one week of activity in May. And then starting at June everything went
smoothly and towards July, August and September there is an acceleration in
finish. I also had a week long vacation in September that I dedicated to
finishing this class.&lt;/p&gt;
&lt;p&gt;Looking back at this graph in retrospect, I probably learnt a lot from real work
in the second part of the year and that helped me to accomplish a lot more and
move faster.&lt;/p&gt;
&lt;p&gt;My notes are available &lt;a href="https://github.com/Slava/6.033-systems-engineering"&gt;online&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;What is next?&lt;/h2&gt;
&lt;p&gt;Overall I believe this course was very beneficial to me and I would probably
recommend at least skimming some of the materials to anyone who did not go
through all of this already at school and wants to make up for it learning bits
here and there themselves.&lt;/p&gt;
&lt;p&gt;After this course it would probably much easier to start learning narrower
topics in more details: Operating Systems, Networks, Compilers, Database,
Distributed Systems - any of these would be a natural continuation with some
obvious real-life practical knowledge. This is exactly what I am going to do
next - learn these one by one.&lt;/p&gt;
&lt;h2&gt;Materials&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Watch the version of Spring 2012 on MIT OCW: &lt;a href="http://video.mit.edu"&gt;http://video.mit.edu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;See the schedule with all papers and assignments: &lt;a href="http://web.mit.edu/6.033/www/schedule.shtml"&gt;http://web.mit.edu/6.033/www/schedule.shtml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;My notes are available online: &lt;a href="https://github.com/Slava/6.033-systems-engineering"&gt;https://github.com/Slava/6.033-systems-engineering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Meteor + Redis = &lt;3</title><link href="http://devblog.me/meteor-redis.html" rel="alternate"></link><updated>2014-08-08T00:00:00-07:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2014-08-08:meteor-redis.html</id><summary type="html">&lt;p&gt;In the period of time from June till mid-July 2014 we worked with &lt;a href="https://twitter.com/justinsantab"&gt;Justin Santa
Barbara&lt;/a&gt; on the experimental &lt;a href="http://redis.io"&gt;Redis&lt;/a&gt; support for &lt;a href="https://www.meteor.com"&gt;Meteor&lt;/a&gt;.&lt;/p&gt;
&lt;iframe width="640" height="360" src="//www.youtube.com/embed/-Vnb8tjnE3k?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;There is no doubt that Redis has become quite popular for a wide range of tasks.
Thanks to a big number of different data-structures and operators, everyone is
free to use Redis in any imaginable way: from message queue to distributed lock
and to main application data-store.&lt;/p&gt;
&lt;p&gt;The last use-case, application data-store, was the most interesting to us as we
can easily synchronize data between clients and servers and give the same
semantics and commands as the original Redis in a JavaScript implementation for
the browser. That's exactly what we did: we have built an in-memory JS
implementation of Redis commands and called it &lt;a href="https://github.com/meteor/miniredis"&gt;MiniRedis&lt;/a&gt; (the same
way we already have &lt;a href="https://github.com/meteor/meteor/tree/devel/packages/minimongo"&gt;MiniMongo&lt;/a&gt; for MongoDB). All the server-side
pub/sub logic is implemented in a separate package called
&lt;a href="https://github.com/meteor/redis-livedata"&gt;Redis-Livedata&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This allows us to give users of Meteor the same API on both client and server
with seamless data synchronization.&lt;/p&gt;
&lt;p&gt;We did some work to make Redis-based structures work with other parts of Meteor
so right now you can easily publish data, subscribe to it (both client-server
and server-server), control access to data and write permissions, pass Redis
subset of data to Blaze Views to keep the DOM representation in sync with the
model.&lt;/p&gt;
&lt;p&gt;After talking to users about their most common use-cases, we decided to focus on
Strings and Maps as those are usually the things you push to the clients as the
application data. For example, you would not push a huge Set to every client,
instead, you would just query on the server in an RPC or on demand.&lt;/p&gt;
&lt;p&gt;After spending 1.5 month on this project, we are super happy with the results.
I &lt;a href="https://www.youtube.com/watch?v=-Vnb8tjnE3k&amp;amp;list"&gt;have given a talk about it&lt;/a&gt; on Meteor Devshop July 2014 in SF and
the feedback so far has been positive. Justin and I are still thinking of
continuing to work on Redis integration if the community wants it.&lt;/p&gt;
&lt;p&gt;Also checkout &lt;a href="https://www.youtube.com/watch?v=T7-_Nc6zTH0"&gt;another Devshop talk&lt;/a&gt; by Justin Santa Barbara on Meteor
Devshop May 2014 that presents a different approach to the integration.&lt;/p&gt;
&lt;p&gt;Simply speaking, this work is nothing amazing but a good show-case that
the integration of other data-stores shouldn't have any problems with Meteor
specifically.&lt;/p&gt;</summary></entry><entry><title>Weekend project: Heavybit talk player</title><link href="http://devblog.me/talk-player.html" rel="alternate"></link><updated>2014-08-04T00:00:00-07:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2014-08-04:talk-player.html</id><summary type="html">&lt;p&gt;&lt;img alt="Heavybit Library" src="/images/heavybit.png" /&gt;&lt;/p&gt;
&lt;p&gt;For some time I have been on a look out for a good example of a web app. Not a
collection of animations and useless pop-ups but something that makes the user
experience actually better.&lt;/p&gt;
&lt;p&gt;One of such examples that came across my eye was the talk player on the
&lt;a href="http://www.heavybit.com/library/video/2013-10-15-marten-mickos"&gt;Heavybit Library page&lt;/a&gt;. The player is interesting as it improves my
experience by providing the outline, the talk transcript and the playback
synchronization between the video, slides and text.&lt;/p&gt;
&lt;p&gt;You can compare it to the player &lt;a href="http://www.infoq.com/presentations/meteor-web"&gt;InfoQ provides&lt;/a&gt;, for example, this
player focuses on slides and sound more. Compared to watching talks on YouTube I
can skim the transcript, find a part I am the most interested in and come back
to the talk clicking on the highlighted quotes afterwards.&lt;/p&gt;
&lt;p&gt;I decided to replicate the player myself over the weekend and see what happens.
Of course I decided to do it in &lt;a href="https://www.meteor.com"&gt;Meteor&lt;/a&gt; as it suites the purpose of
on-page reactivity perfectly ;).&lt;/p&gt;
&lt;p&gt;The first evening was spent adjusting CSS styles as I am really bad in the
front-end development. Luckily I already had the page I am replicating and it
was fairly easy to look at the layout and break it down to smaller templates.&lt;/p&gt;
&lt;p&gt;Some non-obvious work was required to use the jQuery plugin
&lt;a href="http://imakewebthings.com/jquery-waypoints/shortcuts/sticky-elements/"&gt;"waypoints.sticky"&lt;/a&gt; as it didn't play really well with Blaze,
the rendering engine. It was solved in 10 minutes through by "reapplying" the
plugin every time the template might have been rendered.&lt;/p&gt;
&lt;p&gt;By manipulating the &lt;a href="http://videojs.com/"&gt;Video.js&lt;/a&gt; I created a reactive data source that
would update every time the playback position has been changed. That allowed me
to sync the other parts of the story - slides player (&lt;a href="http://lab.hakim.se/reveal-js/"&gt;Reveal.js&lt;/a&gt;) and
the transcript assembled from the subtitles I already had.&lt;/p&gt;
&lt;p&gt;Two days later, I have a fully-functioning player which is very similar to the
one Heavybit has, built entirely in Meteor. It was a good exercise for me as I
don't get a chance to build apps with Meteor that often. It's been a good
weekend as I did a lot of other things as well outside on a lake.&lt;/p&gt;
&lt;p&gt;You can check it out &lt;a href="http://talk-player.meteor.com/"&gt;live&lt;/a&gt; or on
&lt;a href="https://github.com/Slava/talk-player"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I want to thank Tim Nguyen who has built the original Heavybit Library, great
work!&lt;/p&gt;</summary></entry><entry><title>Callbacks, Promises, Generators and Fibers</title><link href="http://devblog.me/solve-cb-hell.html" rel="alternate"></link><updated>2014-04-27T00:00:00-07:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2014-04-27:solve-cb-hell.html</id><summary type="html">&lt;p&gt;&lt;img alt="Promises" src="/images/promise.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;The topic of the use of callbacks vs the use of promises has been rocking
through JavaScript community for several years now. Some people don't like
callbacks, other people think that promises are even worse and since generators
(a new feature of ES6) became available on Google Chrome and node.js (behind
experimental features flags) the battle became 3-sided: callbacks vs promises vs
promises via generators.&lt;/p&gt;
&lt;p&gt;There is another approach to the "callbacks hell" problem available on all major
versions of node.js - the fibers npm package.&lt;/p&gt;
&lt;p&gt;Each approach to the problem (if you accept the "callbacks hell" as a legitimate
problem) has multiple drawbacks. In this post I want to list several concerns I
have learnt about in the order of decreasing importance to me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JS novice friendliness (how quickly a person coming from Java or Python can
  learn it?)&lt;/li&gt;
&lt;li&gt;Platform availability and the distribution (Will your solution work on all
  browsers? Do you need to ship a library with your code or recompile your
  code?)&lt;/li&gt;
&lt;li&gt;Development scalability (in a project bigger than 5 files and 2 layers of
  abstractions/indirection will this approach bring more harm than good?)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Callbacks&lt;/h2&gt;
&lt;p&gt;Callbacks - provide an anonymous function for every async call or pass a
function that was defined somewhere else as the callback argument.&lt;/p&gt;
&lt;p&gt;Here is a fictional example of a very common task: make two sequential http
requests, insert a computed result to the database and move on with some other
action.&lt;/p&gt;
&lt;p&gt;In a simplest example we would not have a complex error handling logic and
sometimes we would prefer having anonymous functions to predefined functions.
We would surely balance between the two so our code doesn't become 10 layers
indented.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;saveBookAuthorDescription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bookId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;HTTP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://api.site.com/book/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;bookId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;HTTP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://anothersite.com/api/v1/store/author/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Even omiting complex error handling and avoiding a more complicated concurrent
examples - it still would look weird and alien to someone who is used to a
different imperative language.&lt;/p&gt;
&lt;p&gt;Although code like this might look familiar to someone who worked with C# and
.NET framework where you can make an http request in a background thread from a
thread-pool or to someone who worked with Cocoa framework in Objective-C - there
is often a need to pass a block function (a slightly different anonymous
function) to the Grand Central Dispatcher (GCD).&lt;/p&gt;
&lt;p&gt;It can definitely become one of the many JS/node confusions to a complete newbie
who just wants to build websites in the same fashion he was taught to add
numbers together.&lt;/p&gt;
&lt;p&gt;From the availability prospective it is raw-perfect: you can write something
similar on node.js talking to other services or databases or reading files and
in your browser handling user actions, driving animations and making network
requests. No compilation, no problems in distribution.&lt;/p&gt;
&lt;p&gt;From the middle to bigger projects prospective it can become hairy over time:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;indentation levels will become deeper, the number of named functions scattered
across the file will only grow, making reading and following the code harder&lt;/li&gt;
&lt;li&gt;error handling will be tricker as usual try-catch blocks will be worthless,
  stacktraces shorter, uninformative&lt;/li&gt;
&lt;li&gt;handling parallel async operations will require a non-trivial amount of
  additional variables, counters and confusion&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Promises&lt;/h2&gt;
&lt;p&gt;Promise is an object that represents a "promised result" of an async
computation. Promises can be deferred, combined into series of consecutive or
parallel computations.&lt;/p&gt;
&lt;p&gt;There exist a wild variety of the Promises libraries. Some libraries even
based all their async APIs on Promises (ex.: jQuery, Ember.js). Unfortunately,
not all Promises implementations are fully compatible with each other, but most
of them implement the community defined spec
&lt;a href="http://promises-aplus.github.io/promises-spec/"&gt;Promises/A+&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Our simple example will now look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Presumably you have converted your HTTP.get and database.insert functions to&lt;/span&gt;
&lt;span class="c1"&gt;// promises as well&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;saveBookAuthorDescription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bookId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;HTTP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://api.site.com/book/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;bookId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// cannot chain this call as it depends on the result of previous operation&lt;/span&gt;
    &lt;span class="nx"&gt;HTTP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://anothersite.com/api/v1/store/author/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// success&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// failure&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// failure&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have converted our example to a function with the same interface but all
computations are based on Promises. It looks a bit cleaner, the level of
indentation clearly can be reduced.&lt;/p&gt;
&lt;p&gt;But it still does look different to someone who has never used a promises
library before:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;code still has a lot of anonymous functions&lt;/li&gt;
&lt;li&gt;since closures don't share the scope, some of the calls are still required to
  be nested (or other library APIs need to be learnt and used)&lt;/li&gt;
&lt;li&gt;now you need to learn a new syntax of Promises, learn how to transform
existing methods to promises-based methods&lt;/li&gt;
&lt;li&gt;need to learn another way of error handling: usual try/catch/finally wouldn't
work&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From the availability and distribution point of view:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;there are a lot of libraries to pick from&lt;/li&gt;
&lt;li&gt;some libraries use Promises with slightly different behavior (like jQuery) you
would need to interoperate with&lt;/li&gt;
&lt;li&gt;if your application depends on other libraries those use different promises
  libraries, you would need to load all of them even though they implement the
  same functionality. Probably not a big problem considering their code sizes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lastly, complex parallel or racy operations are probably easier as a lot of
common functionality is already baked into the libraries. With time and practice
these tasks would be trivial to write. However:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you would need to convert all callbacks-based APIs to Promises when external
libraries are used (or find an equivalent already converted to Promises)&lt;/li&gt;
&lt;li&gt;the code still can be difficult to read as every other line is wrapped into a
callback for promises&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Generators&lt;/h2&gt;
&lt;p&gt;You might have heard of them already. Generators is a concept successfully
implemented and used in many programming languages (Generators in Python 3, lazy
sequences in Clojure, etc). ES6 standard defines Generators as a part of the
standard but it is yet to be implemented and fully supported in major JS
engines.&lt;/p&gt;
&lt;p&gt;From the name, you can guess, that Generators are somehow related to the process
of generating some values. You can read more about their syntax and primary use
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*"&gt;here on MDN&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Generators are interesting in the context of the callbacks because using them in
an interesting way we can recreate the concept of
&lt;a href="http://en.wikipedia.org/wiki/Coroutine"&gt;coroutines&lt;/a&gt; or rather
&lt;a href="http://en.wikipedia.org/wiki/Coroutine#Comparison_with_generators"&gt;semicoroutines&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Coroutines aren't new either. They were used sucessfully in a lot of popular
programming languages and frameworks. I first met them in Python
&lt;a href="http://tornado.readthedocs.org/en/latest/gen.html"&gt;Tornado&lt;/a&gt; and Python
&lt;a href="http://greenlet.readthedocs.org/en/latest/"&gt;Greenlets&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There has been enough excitement in the node community about generators and how
they can solve the callbacks hell, reading
&lt;a href="http://jlongster.com/A-Study-on-Solving-Callbacks-with-JavaScript-Generators"&gt;this&lt;/a&gt;
and &lt;a href="https://medium.com/code-adventures/174f1fe66127"&gt;this&lt;/a&gt; pieces might be
enough for you to recover your faith into ECMA-262 committee.&lt;/p&gt;
&lt;p&gt;If you decide to use the generators approach, then you wouldn't use raw
generator functions and yielding. Rather then that, you would either write a
set of helper functions or one of the written ones. After converting all async
methods to support awaiting on, you would use the &lt;code&gt;yield&lt;/code&gt; keyword to mark the
awaiting.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Presumably you have converted your HTTP.get and database.insert functions to&lt;/span&gt;
&lt;span class="c1"&gt;// generators. Use a helper library Q.&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;saveBookAuthorDescription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bookId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// get the book in the http request&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bookResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;HTTP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://api.site.com/book/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;bookId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bookResponse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="c1"&gt;// get the author in http request&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;authorResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;HTTP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://anothersite.com/api/v1/store/author/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;authorResponse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="c1"&gt;// insert into the database and wait for the result of the write&lt;/span&gt;
      &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// failure handling&lt;/span&gt;
      &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have a clear improvement: the indentation doesn't change as we use async
methods. We now can put everything into a native try-catch block. The
readability of code improved as we can keep the same scope w/o passing all
necessary variables down the async operation, i.e. the stack is preserved.&lt;/p&gt;
&lt;p&gt;There are some disadvantages for someone who is not super-familiar with
coroutines or generators:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;function*&lt;/code&gt; and &lt;code&gt;yield&lt;/code&gt; syntax might be confusing&lt;/li&gt;
&lt;li&gt;since &lt;code&gt;yield&lt;/code&gt; doesn't suspend the whole stack, programmer needs to manually
  &lt;code&gt;yield&lt;/code&gt; on every level or use a callbacks and generators mixed approach as
  shown above&lt;/li&gt;
&lt;li&gt;there is a big chance that almost every function will be a generator in your
  code-base as everything uses the async methods in your app's business logic
  (on the bright side: it is very easy to tell which method yields)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From the distribution standpoint there are these issues you would need to face:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;isn't implemented by browsers, only available in node behind a flag&lt;/li&gt;
&lt;li&gt;you can transpile the generators code to a regular es5 code but then there is
  a need to support compilation, source-maps and long stack-traces correctly&lt;/li&gt;
&lt;li&gt;even if you use native generators, there is a possibility they are not
  optimized by the V8 engine or are not as optimized as a regular
  generators-free code&lt;/li&gt;
&lt;li&gt;tooling such as autocompletion plugins (ex.: tern.js) or IDEs didn't catch up
  on new ES6 features yet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, from the code-base scalability point of view:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you would need to convert all 3rd party code to generators or use the mixed
  approach which may require some discipline&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Fibers&lt;/h2&gt;
&lt;p&gt;TODO&lt;/p&gt;</summary></entry><entry><title>XP: RPG vs Real Life</title><link href="http://devblog.me/xp.html" rel="alternate"></link><updated>2014-04-17T00:00:00-07:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2014-04-17:xp.html</id><summary type="html">&lt;p&gt;&lt;img alt="Level Up!" src="/images/level-up.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;If you played RPGs, you probably have heard of the term "XP", which means
"experience". Experience is a big part of RPGs: your character accomplishes
tasks, fights monsters, gets more experience and progresses gaining new
skills and abilities. Acquired knowledge makes your character stronger and now
they can be more effective in what they do.&lt;/p&gt;
&lt;p&gt;This experience model was surely designed after the real world: do something
useful and learn new skills from it.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Experience_point"&gt;The Wikipedia article&lt;/a&gt;
distinguishes several classes for XP systems in modern video games.&lt;/p&gt;
&lt;p&gt;Level-based progression means you would need to collect a certain number of XP
points to get to the next level of your character. Once you are there, either
your stats or a specific ability will increase or become more powerful. It is
the simplest form of progression: no choice, no matter what type of experience
your character gets - the development of skills is linear and prearranged.&lt;/p&gt;
&lt;p&gt;Free-form advancement is a game mechanic system where you can "spend" your
character points, acquired by "level-ups", on the skills you desire to get
advanced. This system is very common and can be met in the RPGs like Diablo or
King's Bounty. Usually there is a skill tree and some skills are discoverable
only after "learning" the required skills.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Skill tree in Diablo" src="/images/diablo-skill-tree.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Sometimes, once you've chosen one development branch of the skill tree, there is
no way back. So once you've become a druid, chances you will relearn as a
soldier are very low.&lt;/p&gt;
&lt;p&gt;There is also a Cash-in advancement system which looks similar to the Free-form
but uses XP points directly to purchase skills rather than character points. I
think the difference is - in Free-form advancement each skill has roughly
equal cost on the same level, but in Cash-in advancement there are predefined
prices for each ability or spell.&lt;/p&gt;
&lt;p&gt;The fourth one is called "Activity-based advancement" and in my opinion it is
the closest system to the real world. Here each skill has an individual
statistic. Your character develops certain skill only after accomplishing the
task related directly to that skill. If you kill a dragon - you become better at
fighting dragons but not in making food or catching fish.&lt;/p&gt;
&lt;p&gt;Your activity directly affects the development of your character and your
actions in the game define what you get in the end. So you cannot spend the
whole day building houses and then increase your bow shooting skill. It is not
realistic, you probably didn't even touch a bow.&lt;/p&gt;
&lt;p&gt;&lt;img alt="TES: Morrowind - level up" src="/images/morrowind-level-up.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;It bothers me that this is still not close to real life. I would slightly alter
the system and give some experience advancement in that skill even if you failed
the task. If you attacked the dragon, was defeated but survived and escaped - I
would call it a hell of experience. The mission was aborted and it is far from
declaring the victory - but your character must have learnt how to fight
dragons, how to survive in the heat of flame and how to hide in the lake while
the furious reptile is seeking for offender on the surface.&lt;/p&gt;
&lt;p&gt;Pretty sure some modern game has already implemented a combination of all the
above and kept it both realistic and engaging at the same time.&lt;/p&gt;
&lt;p&gt;For better or worse, that's how the XP system of our bigger game works.
Unfortunately it has no difficulty selection screen.&lt;/p&gt;</summary></entry><entry><title>Spacebars in your Vim</title><link href="http://devblog.me/vim-spacebars.html" rel="alternate"></link><updated>2014-04-01T00:00:00-07:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2014-04-01:vim-spacebars.html</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/meteor/meteor/tree/master/packages/spacebars"&gt;Spacebars&lt;/a&gt; is a templating language inspired by Handlebars (Mustache) and is a
default language used by &lt;a href="https://www.meteor.com/blog/2014/03/27/meteor-080-introducing-blaze"&gt;Blaze&lt;/a&gt;, &lt;a href="https://www.meteor.com"&gt;Meteor&lt;/a&gt;'s live DOM-updating engine.&lt;/p&gt;
&lt;p&gt;I am a heavy Vim user and it frustrates me when something doesn't work well in
my favorite text editor. For this time, my templates were not displayed
perfectly and Vim's auto-indenter was confused by the new syntax so it looked
pretty bad even with the &lt;a href="https://github.com/mustache/vim-mustache-handlebars"&gt;mustache/vim-mustache-handlebars&lt;/a&gt; installed.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Spacebars in Vim" src="/images/spacebars.png" /&gt;&lt;/p&gt;
&lt;p&gt;So, learning some VimScript from &lt;code&gt;:h syntax&lt;/code&gt; and &lt;a href="http://learnvimscriptthehardway.stevelosh.com/"&gt;VimScriptTheHardWay&lt;/a&gt; book, I
managed to fork and fix some syntax highlighting issues, implement folds for
block-helpers, fix auto-indenter (by borrowing some code from
&lt;a href="https://github.com/othree/html5.vim"&gt;othree/html5.vim&lt;/a&gt;) so block-helpers tags are respected as well as other html
tags.&lt;/p&gt;
&lt;p&gt;The result can be seen on &lt;a href="https://github.com/Slava/vim-spacebars"&gt;Slava/vim-spacebars&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;P.S.: the theme is Tomorrow and you can get my fork of it for Vim on
&lt;a href="https://github.com/Slava/vim-colors-tomorrow"&gt;Slava/vim-colors-tomorrow&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>Meteor: Too Easy to Be Real</title><link href="http://devblog.me/meteor-too-easy-ru.html" rel="alternate"></link><updated>2014-03-11T00:00:00-07:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2014-03-11:meteor-too-easy-ru.html</id><summary type="html">&lt;p&gt;Многие считают, что простота в освноении &lt;a href="https://www.meteor.com"&gt;Meteor&lt;/a&gt; - это
недостаток, все не должно быть так просто. На самом деле под капотом Meteor -
самое что ни на есть чудо инженерской мысли. А технология любой сложности будет
только лучше, если она будет доступна людям.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Meteor splash image" src="/images/meteor-splash.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Meteor - прост для новичков&lt;/h2&gt;
&lt;p&gt;В официальном блоге Meteor уже есть &lt;a href="https://www.meteor.com/blog/2013/12/13/why-web-beginners-should-start-with-meteor"&gt;статья от Alice
Yu&lt;/a&gt;
о том как Meteor помогает новичкам в веб-разработке и программировании сделать
первые шаги осознанными, простыми и тем не менее эффективными.&lt;/p&gt;
&lt;p&gt;Об этом можно писать очень много. У меня лично есть много знакомых
физиков-теоретиков, нейробиологов, начинающих интернет-предпренимателей,
студентов и просто начинающих в веб-разработке, которым Meteor не просто
упростил жизнь, а позволил сделать то, чего они не могли сделать до этого -
начать и закончить проект в одиночку, от начала и до конца. Получить результат,
не тратить время на то, что им не нужно. Ведь не все приходят в веб-разработку
чтобы творить чудеса инженерии.&lt;/p&gt;
&lt;p&gt;К сожалению в профессиональных кругах программистов не все так просто. Не все
части сообщества приняли Meteor с распростертыми объятиями. Особенно это хорошо
видно на популярном сайте Hacker News, где Meteor запустился в первые в 2012
году и до сих пор считается одним из самых успешных YC запусков в истории сайта,
набрав более 1300 очков (что по меркам 2012 года было неимоверно много).&lt;/p&gt;
&lt;h2&gt;"Too easy to be real"&lt;/h2&gt;
&lt;p&gt;Критика нужна и полезна, но иногда она доходит до абсурда. В этом посте мы
рассмотрим критику в отношении одного из самого большего плюса Meteor: простота
в освоении.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the future of hackathons, free code days and weekend dev marathons.
Yet I'm not sure how soon any serious company will trust it with serious applications.
I'm not putting it down, this is incredible progress, the money (x millions in
funding) behind it will give it a good amount of momentum, but it just seems a
bit too easy, a bit too gimmicky to be taken seriously. I hope I'm wrong.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;-- источник: &lt;a href="https://news.ycombinator.com/item?id=4119786"&gt;Hacker News comment by daulex&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Пользователь Hacker News daulex видит Meteor как будущее для Hackathon'ов,
проектов на выходных, но не как главную технологию для серьезной компании и
серьезного приложения.  Потому что Meteor слишком легок, слишком подозрительно
легок, чтобы воспринимать его всерьез.&lt;/p&gt;
&lt;p&gt;Другой комментарий от более популярного человека - Азата Марданова:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-conversation="none" lang="en"&gt;&lt;p&gt;I don&amp;#39;t like MeteorJS very much because it&amp;#39;s too easy and make devs&amp;#39; brains weak&lt;/p&gt;&amp;mdash; Azat Mardanov (@azat_co) &lt;a href="https://twitter.com/azat_co/statuses/403976930300420096"&gt;November 22, 2013&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;Азат на полном серьезе говорит, что Meteor слишком легок и делает мозги
разработчиков слабыми. Хотя позиция Азата не до конца понятна, вот здесь в
&lt;a href="http://webapplog.com/node-js-frameworks/"&gt;одном из своих постов&lt;/a&gt; он говорит:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Meteor is more of a platform with its own packages and services. Its very
opinionated and has a steep learning curve.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;"Steep learning curve" - крутая кривая обучения.&lt;/p&gt;
&lt;p&gt;Это лишь пара примеров, но если поискать получше, то станет понятно -
большинство согласно, что Meteor очень прост в освоении и использовании. Не все
согласны на том, хорошо это или плохо.&lt;/p&gt;
&lt;h2&gt;Религия не позволяет&lt;/h2&gt;
&lt;p&gt;Самый распространенный пример нелюбви - это религиозная злость.
Нелюбить Meteor можно по многим религиозным причинам: JavaScript, web vs native,
поддержка NoSQL DBs, реактивность... Зацепиться можно за любую часть. Нелюбить
простоту решений Meteor можно хотя бы потому что "в моем любимом фреймворке X
это делается не так, там нужно сделать Y, а вы сделали Z" приправленное "и
вообще, у вас все как-то сликом просто, настоящие мужики просто так не
обходятся".&lt;/p&gt;
&lt;h2&gt;Ни себе, ни людям&lt;/h2&gt;
&lt;p&gt;Другой распространенный вид ненависти - это зависть. Зависть, что пару лет
назад, все не было так просто. "Мы в твое время работали за копейки на заводах,
а ты бездельничаешь целыми днями". Почему эти люди не могут порадоваться за
прогресс человечества и за всех новых людей, у которых будет больший выбор
инструментов, стилей разработки и больше простых для работы решений - мне пока
не понятно.&lt;/p&gt;
&lt;h2&gt;Есть, что терять&lt;/h2&gt;
&lt;p&gt;В мире веб-разработки тренды меняются очень часто и планка качества сайтов и
приложений поднимается все выше и выше. Это произошло и в мире веб-страничек -
они стали толще, интерактивнее и быстрее, спасибо высоким стандартам
поставленным такими сайтами как Facebook, Twitter, Quora.&lt;/p&gt;
&lt;p&gt;Некоторые люди успели построить свою успешную карьеру на том, что какой-то
аспект нашей жизни сложен и не доступен всем. На сложности интеграции 5-10
различных технологий для разработки современного веб-приложения можно написать
много книг, записать видео-курсов, продать треннингов, консультировать команды,
проводить курсы для новичков и просто прослыть гуру в своих кругах.&lt;/p&gt;
&lt;p&gt;Как только эти знания и возможности становятся проще и доступными массам,
начинаются сложности. Кто-то подстраивается под динамику мира и продолжает
работу с новыми технологиями, принимая прогресс и движется дальше. Кто-то другой
начинает искать аргументы против прогресса, боясь, что он скоро останется никому
не нужным.&lt;/p&gt;
&lt;h2&gt;Диванная аналитика&lt;/h2&gt;
&lt;p&gt;Для каждой технологии найдется человек, который скажет: "А что в этом такого? Я
и сам такое сделаю на раз-два, если захочу и вообще ничего выдающегося!".
Простота в использовании и доступность создает ложную иллюзию, что и построить
такую систему также легко как и ею пользоваться.&lt;/p&gt;
&lt;p&gt;Зачастую люди думают о неоптимальном и упрощенном решении задачи, которую решили
авторы того или иного проекта, не принимая во внимание широкий круг проблем для
достижения хорошей системы: возможность расширения системы, модулярность,
правильные абстракции и разрезы системы на интерфесы, хорошая документация и
доступность в использовании с первого дня.&lt;/p&gt;
&lt;p&gt;Иногда люди и вовсе не понимают всего масштаба системы, не вдаваясь в
подробности они бросаются словами и просто остаются со своим невежеством. (Это
хорошо видно в &lt;a href="https://news.ycombinator.com/item?id=7294475"&gt;этой ветке&lt;/a&gt;
обсуждений на Hacker News, где обсуждающие могут в корне не понимают о чем идет
речь.)&lt;/p&gt;
&lt;h2&gt;Прагматичный скептицизм&lt;/h2&gt;
&lt;p&gt;Самое рациональное объяснение - программист не верит, что новый инструмент решит
его задачи, лучше чем он сам. Потому что он уже провел более тысячи часов строя
эти системы и он понимает, что для каждого отдельного случая нужно разное и
построить обобщенную систему, которая подходила бы как хорошее решение под
большинство задач - очень сложно.&lt;/p&gt;
&lt;p&gt;Это и есть люди, с которыми интересно работать. Если они начнут изучать Meteor в
деталях и во всех технических подробностях, они найдут очень продуманную систему
под капотом, полную хороших идей и инженерных решений. Правда, любая система
может иметь недостатки, вот здесь и понадобиться помощь других профессионалов в
развитии такого проекта как Meteor.&lt;/p&gt;
&lt;h2&gt;"Если все будет так просто, люди перестанут думать"&lt;/h2&gt;
&lt;p&gt;Это очень популярный аргумент, который существует с момента появления
программирования. Когда был придуман Assembly, "настоящим программированием"
признавалось только программирование бинарным кодом. Позже, с появлением
Fortran, история повторилась. История повторяется с каждым новым шагом.&lt;/p&gt;
&lt;p&gt;Assembly до сих используется в современном мире, но только там, где его
преимущества перед языками более высокого уровня критически важны.
Нужна ли нам такая сложность дня веб-приложений сегодня?&lt;/p&gt;
&lt;p&gt;Используете ли вы языки с ручной управлением памяти (без сборки мусора или
автоматического подсчета ссылок) для написания своих веб-приложений? Сделали ли
сборка мусора, динамическая типизация и ООП-абстракции всех слишком глупыми?&lt;/p&gt;
&lt;p&gt;В конце концов, простота нужна людям. В мире, где тяжело разобраться в своих
правах, системе образования и здравоохранения, кто-то оценит наши усилия сделать
мир технологий проще и доступнее.&lt;/p&gt;</summary><category term="Meteor"></category><category term="Метеор"></category><category term="русский"></category><category term="веб-разработка"></category><category term="платформа"></category><category term="фреймворк"></category></entry><entry><title>Meteor meets your text editor</title><link href="http://devblog.me/meteor-plus-text-editor.html" rel="alternate"></link><updated>2014-02-04T00:00:00-08:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2014-02-04:meteor-plus-text-editor.html</id><summary type="html">&lt;iframe width="640" height="360" src="//www.youtube.com/embed/CcPZ56t8x4I" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;More than a month ago I started working on JavaScript IntelliSense for
&lt;a href="https://www.meteor.com"&gt;Meteor&lt;/a&gt;. Several days ago I presented it in my
lightning talk on &lt;a href="https://www.youtube.com/watch?v=CcPZ56t8x4I"&gt;Meteor Devshop
11&lt;/a&gt;. After getting lots of positive
responses on Twitter and the meteor-talk mailing list I continue on improving
it. &lt;a href="https://github.com/Slava/tern-meteor"&gt;My work brings&lt;/a&gt; more intelligent
tooling to Sublime Text 2/3, Vim and Emacs when you work on a Meteor app in
JavaScript.&lt;/p&gt;
&lt;p&gt;There is a simple problem with web development these days: the tooling is
lacking a lot of features people had for years: static analysis tools, runtime
dynamic analysers, code editors support and others.&lt;/p&gt;
&lt;p&gt;Code editor support is especially important as we spend most of our time there:
writing and, more commonly, reading and exploring code. Modern IDEs like
WebStorm and Visual Studio have accomplished big results in bringing such
intelligent support to their costly products. For light-weight editors lovers
there is open-source project working on that - &lt;a href="http://ternjs.net"&gt;TernJS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Initial email" src="/images/tern-meteor-email.png" /&gt;&lt;/p&gt;
&lt;p&gt;One day I opened an &lt;a href="https://groups.google.com/forum/#!topic/meteor-talk/b_yGWIqXl7Y"&gt;interesting email from Bondi
French&lt;/a&gt; to
meteor-talk. In his email Bondi asked if anyone tried to integrate TernJS,
code-analysis engine for JavaScript, with Meteor. It looked like a good idea to
me and I decided to give it a try.&lt;/p&gt;
&lt;p&gt;Fortunately, I was on my vacation hanging out on sunny warm San Diego beaches
with my good friends, so I had a lot of time to "background process" these
thoughts.&lt;/p&gt;
&lt;p&gt;Nothing made me so enthusiastic to work on such project like a good time spent
outdoors in a good company of friends. It probably was the first time in last 6
month when I got so much sun and spent less than 10 hours a day in front of a
computer.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Photo credits to @armansu on Instagram" src="/images/sd-beach.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;One day I refused to go to a movie theater with others and sat down for a solid
couple of hours implementing an MVP for Meteor + Tern integration: convert type
definitions of Meteor public API (using existing work of
&lt;a href="https://github.com/borisyankov/DefinitelyTyped/blob/master/meteor/meteor.d.ts"&gt;&lt;code&gt;meteor.ts.d&lt;/code&gt;&lt;/a&gt;)
and teaching Tern basic scoping rules of Meteor.&lt;/p&gt;
&lt;p&gt;After my vacation week I found another weekend to finish and test my work. After
testing it on a simple app with Sublime Text first, I &lt;a href="https://www.youtube.com/watch?v=5cAHxpNEHTc"&gt;recorded a simple
screencast&lt;/a&gt; to show my work to
people. The next day I &lt;a href="https://www.youtube.com/watch?v=TIE9ZOqlvFo"&gt;recorded the
sequel&lt;/a&gt; walking through the
installation process for Vim. The same day happy users reported this plugin to
work on Emacs as well. I was happy. The MVP worked for people. It worked for me.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Type-based auto-completion with Meteor app" src="/images/tern-vim-completion.gif" /&gt;&lt;/p&gt;
&lt;p&gt;Smart types-based auto-completion, "jump to definition", "find references",
documentation look up in Meteor apps worked out of the box, thanks to Tern's
flexible plugin system.&lt;/p&gt;
&lt;p&gt;To reach the wider audience I proposed my lightning talk and showed off to
everyone on the Internet.&lt;/p&gt;
&lt;p&gt;I consider it to be pretty successful for a weekend for fun project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It works for my work&lt;/li&gt;
&lt;li&gt;Everyone on the mailing list thread was excited and supportive&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://github.com/Slava/tern-meteor"&gt;GitHub repo&lt;/a&gt; got more than 350
  unique views in over the first week&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It also got covered by all Meteoric knowledge sources: &lt;a href="https://groups.google.com/forum/#!topic/meteor-talk/b_yGWIqXl7Y"&gt;meteor-talk mailing
list&lt;/a&gt;,
&lt;a href="https://twitter.com/imslavko/status/429111204762509313"&gt;Meteor's twitter&lt;/a&gt;,
&lt;a href="http://www.reddit.com/r/Meteor/comments/1wctij/meteor_autocompletion_plugin_for_sublime/"&gt;/r/Meteor&lt;/a&gt;,
&lt;a href="http://www.meteorpedia.com/read/TernJS"&gt;Meteorpedia&lt;/a&gt;, &lt;a href="http://meteorhacks.com/meteor-weekly-ralph-chat-jade-for-meteor-ui.html"&gt;Meteor Hacks
weekly&lt;/a&gt;,
&lt;a href="http://www.meteorpodcast.com/2014/01/24/episode-3-january-24th-2014/"&gt;Meteor
Podcast&lt;/a&gt;,
&lt;a href="https://www.youtube.com/watch?v=CcPZ56t8x4I"&gt;Meteor Devshop SF&lt;/a&gt;, Meteor's
Youtube channel. That's hard to miss :).&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-cards="hidden" lang="en"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search?q=%23MeteorDevshop&amp;amp;src=hash"&gt;#MeteorDevshop&lt;/a&gt;: Meteor autocompletion for Vim, Emacs and Sublime Text: &lt;a href="https://t.co/Zkperjba9C"&gt;https://t.co/Zkperjba9C&lt;/a&gt;; Slides: &lt;a href="http://t.co/hTNJTDIaJb"&gt;http://t.co/hTNJTDIaJb&lt;/a&gt;&lt;/p&gt;&amp;mdash; Slava Kim (@imslavko) &lt;a href="https://twitter.com/imslavko/statuses/429111204762509313"&gt;January 31, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;But it is not over yet! There is a big room for improvements in my plugin! I am
already in the process of bringing Meteor smart-packages analysis support,
documentation support and bringing the tooling for definitions generation for
newer Meteor versions and Atmosphere packages.&lt;/p&gt;
&lt;p&gt;Hopefully, this little side project will make a lot more people happier working
with Meteor. Alright, folks, I going back to oplog work. Will work on this
during next weekend!&lt;/p&gt;</summary></entry><entry><title>Meteor - по-русски</title><link href="http://devblog.me/meteor-intro-ru.html" rel="alternate"></link><updated>2014-01-25T00:00:00-08:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2014-01-25:meteor-intro-ru.html</id><summary type="html">&lt;p&gt;&lt;img alt="Meteor splash image" src="/images/meteor-splash.png" /&gt;&lt;/p&gt;
&lt;p&gt;С тех пор как я начал работать в &lt;a href="https://www.meteor.com"&gt;Meteor Development
Group&lt;/a&gt; в мае 2013 года, друзья и знакомые, которые
программируют, но не читают &lt;a href="http://news.ycombinator.com"&gt;Hacker News&lt;/a&gt;
спрашивали меня: "Что же такое этот Метеор?". И мне всегда было сложно ответить
в двух словах. Этим постом я хочу дать свой взгляд на этот труд в индустрии
программного обеспечения.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1&gt;Meteor - лучший способ построить веб-приложение&lt;/h1&gt;
&lt;/blockquote&gt;
&lt;p&gt;Именно так - лучший. По крайней мере, очень сильно пытается быть лучшим и много
людей, которые хорошо познокомились с Meteor, согласятся: проект движется в этом
направлении и уже на шаг впереди многих.&lt;/p&gt;
&lt;h3&gt;Что такое "лучший"&lt;/h3&gt;
&lt;p&gt;"Лучший" в данном контексте означает многое:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;легко и просто научиться с ним работать&lt;/li&gt;
&lt;li&gt;строить приложение с нуля или добавлять новый функционал можно очень быстро&lt;/li&gt;
&lt;li&gt;несмотря на простоту разработки, Meteor не ограничевает разработчика ни в
  ширину, ни в глубину: вы сможете построить сложные и много-функциональные
  проекты&lt;/li&gt;
&lt;li&gt;от разработчика не требуются знания областей не связанных с приложениями на
  прямую: &lt;a href="http://sleekd.com/general/configuring-nginx-and-unicorn/"&gt;настройка
  серверов&lt;/a&gt;,
  &lt;a href="https://www.google.com/search?q=reverse+proxy+sticky+sessions&amp;amp;oq=reverse+proxy+stick"&gt;масштабирование&lt;/a&gt;,
  &lt;a href="http://en.wikipedia.org/wiki/List_of_build_automation_software"&gt;процесс сборки
  проектов&lt;/a&gt;,
  &lt;a href="http://en.wikipedia.org/wiki/Configuration_management"&gt;управление
  конфиграциями&lt;/a&gt; и др.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Этот список кажется простым и коротким, но за ним скрываются сотни деталей,
которые не поймешь, пока не столкнешься и с "плохим", и с "хорошим" исполнением.&lt;/p&gt;
&lt;h3&gt;Что такое "веб-приложение"&lt;/h3&gt;
&lt;p&gt;Это очень интерактивный веб-сайт. Веб-сайт, который представляет собой большее,
чем сборище веб-страничек с простым текстом. На современном сайте пользователь
увидит куда большее.&lt;/p&gt;
&lt;p&gt;Например: под каждой записью в чьем-то блоге вы можете
оставить комментарий зайдя со своим аккаунтом Твиттер или ВКонтакте; в новостной
ленте вы видите новые истории, которые попадают в поток, как только они
становятся доступны; на вашем любимом сайте с музыкой для пользователей доступны
плейлисты, поиск по жанрам и даже подборка под ваш персональный вкус.&lt;/p&gt;
&lt;p&gt;Современные веб-приложения являются намного более сложными и богатыми на
функционал. Разрабатывать такие приложения - все сложнее.&lt;/p&gt;
&lt;h3&gt;"Способ"?&lt;/h3&gt;
&lt;p&gt;Я использовал слово "способ" и избежал популярных существительных, которыми
характеризуют Meteor: framework, platform. Потому что никто не может дать точное
определние этим заморским словам. Под "способом" я подразумеваю следущее:&lt;/p&gt;
&lt;p&gt;Совокупность из кода, методологии и идей, которые помогут и при надобности
покажут, как построить приложение: от вашей первой строчки кода, сборки проекта
и развертывания на серверах с масштабированием.&lt;/p&gt;
&lt;p&gt;Код, который написан для Meteor позволяет вам пользоваться сложным
функционалам без глубоких знаний и опыта в различных сферах.&lt;/p&gt;
&lt;p&gt;Методология Meteor поможет вам не потеряться в огромном выборе различных хороших
и не очень инструментов, процессов и практик для достижения результата.&lt;/p&gt;
&lt;p&gt;Идеи. Вы найдете в Meteor много инновационных идей, которые не были
распространенны в веб-разработке пару лет назад. Они вдохновляют и сподвигают на
лучшие способы выполнять ту или иную работу.&lt;/p&gt;
&lt;h3&gt;Он поймет и простит&lt;/h3&gt;
&lt;p&gt;Meteor - инструмент разработчика для web. Он не придумает за вас идею, не
позволит вам сделать что-то дельное без единой строки кода. Но он освободит от
ненужной работы - рутинного повторения одного и того же раз за разом, настройки
сотни ненужных систем и возни с конфигурациями. Помимо этого Meteor даст новые
идеи и способы создавать. Meteor не создавался для людей с 10-летним опытом
работы в web, потому что все может быть намного проще.&lt;/p&gt;
&lt;p&gt;На сегодня все, спасибо, если дочитали. В этой статье специально нет ни единой
технической детали, а только общее видение Meteor. В следующих статьях мы
посмотрим на все по-ближе, обещаю.&lt;/p&gt;
&lt;p&gt;Больше официальной информации о Meteor:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meteor.com"&gt;Cайт Meteor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/meteor/meteor"&gt;Проект на GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/meteorjs"&gt;Twitter аккаунт&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://videos.meteor.com"&gt;Youtube канал&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!forum/meteor-talk"&gt;Форум обсуждения пользования&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!forum/meteor-core"&gt;Форум обсуждения предложений&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Русское сообщество на Хабрахабре: &lt;a href="http://habrahabr.ru/hub/meteorjs/"&gt;MeteorJS Hub&lt;/a&gt;&lt;/p&gt;</summary><category term="Meteor"></category><category term="Метеор"></category><category term="русский"></category><category term="веб-разработка"></category><category term="платформа"></category><category term="фреймворк"></category></entry><entry><title>Top 5 syntactic weirdnesses to be aware of in MongoDB</title><link href="http://devblog.me/wtf-mongo.html" rel="alternate"></link><updated>2014-01-05T00:00:00-08:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2014-01-05:wtf-mongo.html</id><summary type="html">&lt;p&gt;&lt;img alt="mongodb logo" src="http://fc01.deviantart.net/fs70/f/2010/168/e/1/Icon_MongoDB_by_xkneo.png" /&gt;&lt;/p&gt;
&lt;p&gt;Rage posts about MongoDB are quite popular these days. Most of them are about
poor performance on specific data sets, reliability and sharding issues. Some of
those blog posts might be right, other are just saying that the most popular
NoSQL solution didn't fit their needs.&lt;/p&gt;
&lt;p&gt;This article is not one of those. While most of the posts focus on operations
part, benchmarks and performance characteristics, I want to talk a little bit
about MongoDB query interfaces. That's right - programming interfaces,
specifically about node.js native driver but those are nearly identical across
different platform drivers and Mongo-shell.&lt;/p&gt;
&lt;p&gt;Disclaimer: I try hard not to hate on MongoDB. In fact I work with MongoDB every
work day as part of my full-time job. I also take part in the development of
&lt;a href="https://github.com/meteor/meteor/tree/devel/packages/minimongo"&gt;Minimongo&lt;/a&gt;,
pure-JavaScript clone of MongoDB API to work with in-memory caches. There is no
reason for me to mock Mongo other than warning everyone about its sharp edges.
Most of these gotchas are found by &lt;a href="https://twitter.com/glasser"&gt;David Glasser&lt;/a&gt;.
This article assumes you are familiar with MongoDB's API.&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;1. Keys order in a hash object&lt;/h1&gt;
&lt;p&gt;Let's say you want to store a simple object literal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;db&lt;/span&gt;&lt;span class="nc"&gt;.books.insert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Woe from Wit&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;A. Griboyedov&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1823&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Great! Now we have a book record. Let's say later we would want to find all
books published in 1823, written by this author ("A. Griboyedov"). It is
unlikely to return more than one result but at least it should return the "Woe
from Wit" book as we just inserted it, right?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;db&lt;/span&gt;&lt;span class="nc"&gt;.books.find&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1823&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;A. Griboyedov&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nt"&gt;No&lt;/span&gt; &lt;span class="nt"&gt;results&lt;/span&gt; &lt;span class="nt"&gt;returned&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What happened? Didn't we just insert a book with such meta-data? Let's try
flipping the order of keys in the meta object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;db&lt;/span&gt;&lt;span class="nc"&gt;.books.find&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;A. Griboyedov&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1823&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;_id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;...,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Woe from Wit&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here it is!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The gotcha&lt;/strong&gt;: the order of keys matters in MongoDB, i.e. &lt;code&gt;{ a: 1, b: 2 }&lt;/code&gt; does
not match &lt;code&gt;{ b: 2, a: 1 }&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why does it happen&lt;/strong&gt;: MongoDB uses a binary data format called
&lt;a href="http://bsonspec.org/"&gt;BSON&lt;/a&gt;. In BSON, the order of keys always matters.
Notice, in JSON an object is an unordered set of key/value pairs.&lt;/p&gt;
&lt;p&gt;What about JavaScript? ECMA-262 left it as 'undefined'. In some browsers
(usually old ones) the order of pairs is not preserved meaning they can be
anything. Thankfully most modern browsers' JavaScript engines preserve the order
(sometimes even in arrays), so we can actually control it from node.js code.&lt;/p&gt;
&lt;p&gt;Read more about it at &lt;a href="http://ejohn.org/blog/javascript-in-chrome/"&gt;John Resig's
blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The answer to this is to either always specify pairs in the canonical form (keys
are sorted lexicographically) or just to be consistent across your code base.&lt;/p&gt;
&lt;p&gt;Another workaround would be to use a different selector, specifying certain
key-paths rather than comparing to an object literal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;meta.year&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1823&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;meta.author&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A. Griboyedov&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It would work in this particular case but note that the meaning of this selector
is different.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The gotcha&lt;/strong&gt;: this behavior can be dangerous whenever you want to build a
multi-key index.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ensureIndex&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;meta.year&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In such command the priority of &lt;code&gt;title&lt;/code&gt; would be higher than the priority of
&lt;code&gt;meta.year&lt;/code&gt; field. This is important to the way MongoDB will lay out your data:
&lt;a href="http://docs.mongodb.org/manual/core/index-multikey/"&gt;Read more in docs&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;2. undefined, null and undefined&lt;/h1&gt;
&lt;p&gt;Anyone remembers those times when the behavior of &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; and the
relation was confusing? In JavaScript world those are two different values and
they are not the same in a strict comparison &lt;code&gt;undefined !== null&lt;/code&gt;. However, they
are equal in a non-strict comparison &lt;code&gt;undefined == null&lt;/code&gt;. Some people are very
careful with them, others use them interchangeably. But the point is: you have
two different but similar values in JavaScript.&lt;/p&gt;
&lt;p&gt;MongoDB brings it to the next level. The &lt;a href="http://bsonspec.org/#/specification"&gt;BSON
spec&lt;/a&gt; defines &lt;code&gt;undefined&lt;/code&gt; as "deprecated".&lt;/p&gt;
&lt;p&gt;Node.js node-native-driver for MongoDB &lt;a href="https://github.com/mongodb/js-bson/blob/master/lib/bson/bson.js#L77"&gt;doesn't implement
it&lt;/a&gt; at all.&lt;/p&gt;
&lt;p&gt;In the current version (2.4.8) the behavior shows that &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;
are treated as the same value.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;things&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;things&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;// the &amp;#39;a&amp;#39; is undefined implicitly&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;things&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I am not sure about the actual implementation, it looks like &lt;code&gt;undefined&lt;/code&gt; is just
converted to &lt;code&gt;null&lt;/code&gt; by node driver but is restricted in mongo-shell.&lt;/p&gt;
&lt;p&gt;In the following code we will get the same result printed twice: all 3 objects.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// from node.js code with mongo/node-native-driver&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;things&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;things&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;things&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;things&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;things&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However in mongo-shell you will be able to query only with &lt;code&gt;null&lt;/code&gt; but we get all
three objects as well.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// from mongo-shell&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;things&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$err&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;can&amp;#39;t have undefined in a query expression&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;code&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;13629&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;things&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wMWNPm7zrYXTNJpiA&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;RjrYvmZF5EukhpuAY&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;kethQ2khbyfFjJ7Sa&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can see that mongo/node-native-driver converted the explicit &lt;code&gt;undefined&lt;/code&gt; to
&lt;code&gt;null&lt;/code&gt; but left the implicit one as is (which is expected really).&lt;/p&gt;
&lt;p&gt;The cool stuff happens when we insert an explicit &lt;code&gt;undefined&lt;/code&gt; &lt;em&gt;from mongo-shell&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// from mongo-shell&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;things&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;things&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wMWNPm7zrYXTNJpiA&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;RjrYvmZF5EukhpuAY&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;kethQ2khbyfFjJ7Sa&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We get the same three values and no new object with &lt;code&gt;b=4&lt;/code&gt;. Shouldn't &lt;code&gt;undefined&lt;/code&gt;
match &lt;code&gt;null&lt;/code&gt;? Let's look at the new object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;things&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;52ca134f3e47d3d91146f2b5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is still there, &lt;code&gt;a&lt;/code&gt; field is holding something looking like &lt;code&gt;null&lt;/code&gt; but
doesn't match the &lt;code&gt;null&lt;/code&gt; from our selector.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The gotcha&lt;/strong&gt;: there are more than 2 values looking like &lt;code&gt;null&lt;/code&gt; in MongoDB:
&lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; inserted from mongo-shell that looks like
&lt;code&gt;null&lt;/code&gt; in the shell but in reality matches the deprecated &lt;code&gt;undefined&lt;/code&gt; in BSON
(type number six). The last one doesn't match &lt;code&gt;null&lt;/code&gt; from the selectors, first
two match both &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt;. The absence of value also matches both.&lt;/p&gt;
&lt;p&gt;Read the original &lt;a href="https://github.com/meteor/meteor/issues/1646#issuecomment-29682964"&gt;GitHub issue&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;3. Soft limits, hard limits and no limits&lt;/h1&gt;
&lt;p&gt;Let's say you have a feed of items and you allow user to specify the number
items to return. You would return the result of a query looking like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;db.items.find({ ... }).limit(N);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where &lt;code&gt;N&lt;/code&gt; is supplied by user. Of course we want to be careful and restrict user
up to 50 items, otherwise anyone in the Internet would be able to load our
application server and the database simply by supplying a very large &lt;code&gt;N&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getItems&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({}).&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Looks like a reasonable code running in your node.js app (server-side).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The gotcha&lt;/strong&gt;: if user supplies &lt;code&gt;0&lt;/code&gt; (zero) as a number of items he wants to get
the MongoDB would take it as "give me everything".&lt;/p&gt;
&lt;p&gt;It is well documented but not obvious right away: zero means "no limit" to
MongoDB. My guess is some code just treats all falsy values the same way:
&lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, absence of value - everything means "no limit".&lt;/p&gt;
&lt;p&gt;That's OK, we can treat &lt;code&gt;0&lt;/code&gt; as a special case:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getItems&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// check if N is falsy (&amp;quot;no limit&amp;quot;)&lt;/span&gt;
    &lt;span class="nx"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({}).&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Looks good? But what happens if user supplies a negative number? Is it even
possible? What could it possibly mean?&lt;/p&gt;
&lt;p&gt;In reality something like &lt;code&gt;db.items.find().limit(-1000000000000)&lt;/code&gt; can return a
bazillion of items. It is hard to find the documentation about it but several
month ago I have seen the description of this behavior in node.js driver's docs,
it talked about "soft" and "hard" limits. I have no idea what does it mean.&lt;/p&gt;
&lt;p&gt;So the final version of our server-side method would look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getItems&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// check if N is falsy (&amp;quot;no limit&amp;quot;)&lt;/span&gt;
    &lt;span class="nx"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({}).&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;The gotcha&lt;/strong&gt;: limit can be negative. It would mean the same as positive in the
broader sense but the negative one is "soft".&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;4. Special treatment for arrays&lt;/h1&gt;
&lt;p&gt;A lot of people don't know this "feature" but arrays are treated specially.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.x&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;$gt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.x&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;$gt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.x&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;$gt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;}})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;Nothing&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So whenever there is an array in object, the selector would "branch" to every
element and this acts like "if any of those match, then the whole document
matches".&lt;/p&gt;
&lt;p&gt;Notably, it doesn't work for nested arrays:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b.x&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b.x&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;Nothing&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b.x&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;Nothing&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Same feature applies to the fields projections:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[[{&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;},{&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}],{&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;},[{&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;}]]})&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.b&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;52ca24073e47d3d91146f2b7&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we play a bit more combining this feature with numeric keys in selectors the behavior becomes harder and harder to predict:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[{&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;01&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;11&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}]],&lt;/span&gt; &lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;zzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.x&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;00&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;Nothing&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.x&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;01&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;Nothing&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.x&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;Nothing&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.x&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;11&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;Nothing&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.0.0.x&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;00&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;zzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;     &lt;span class="p"&gt;[&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;00&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;01&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;     &lt;span class="p"&gt;[&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;11&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.0.0.x&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;01&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;Nothing&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.0.x&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;00&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;zzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;     &lt;span class="p"&gt;[&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;00&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;01&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;     &lt;span class="p"&gt;[&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;11&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.0.x&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;01&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;zzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;     &lt;span class="p"&gt;[&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;00&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;01&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;     &lt;span class="p"&gt;[&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;11&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.0.x&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;Nothing&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.0.x&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;11&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;Nothing&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.1.x&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;00&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;Nothing&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.1.x&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;01&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;Nothing&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.1.x&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;zzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;     &lt;span class="p"&gt;[&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;00&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;01&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;     &lt;span class="p"&gt;[&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;11&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.1.x&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;11&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;zzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;00&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;01&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;11&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And later becomes just inconsistent. The difference between this and next
examples is just the inner value: in the last example it is an object, in the
following it is a number. It is enough for behavior to change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;yyy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;Nothing&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.0&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;Nothing&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.0.0&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;yyy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;The gotcha&lt;/strong&gt;: avoid arrays and nested arrays or other one-to-many pairs in
your documents queried by selectors with a usual intend to query one-to-one
pairs. The combination with numeric keys (like &lt;code&gt;{ 'a.0.x': Y }&lt;/code&gt; meaning the
field &lt;code&gt;x&lt;/code&gt; of the first element of field &lt;code&gt;a&lt;/code&gt; must be &lt;code&gt;Y&lt;/code&gt;) may become very
confusing as it depends on your data.&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;5. $near geo-location operator&lt;/h1&gt;
&lt;p&gt;This one is simple. You have a collection of documents with a location field.
Location field represents a geo-location. The trick is in two different types of
locations MongoDB can index, each type has a slightly different API and a
slightly different behavior.&lt;/p&gt;
&lt;p&gt;The first one looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$near&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;12.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;32.1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;$maxDistance&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;777&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The second one looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$near&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;$geometry&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Point&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;coordinates&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;12.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;32.1&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nx"&gt;$maxDistance&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;777&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;The gotcha&lt;/strong&gt;: the syntax of geo-query is slightly different depending on the
index type. &lt;code&gt;$maxDistance&lt;/code&gt; is the sibling element of &lt;code&gt;$near&lt;/code&gt; in case of plain
pairs and is a child in case of Geo-JSON.&lt;/p&gt;
&lt;p&gt;But there is more! Sometimes you can get the same point twice in the result set!
To understand this we need to recall the previous gotcha about nested arrays.
Consider this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;// inserting an array of two points&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ensureIndex&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2d&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;$near&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;$maxDistance&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;52ca30ec3e47d3d91146f2b8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;location&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;52ca30ec3e47d3d91146f2b8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;location&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Same point is returned twice as both points from the array match the selector.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;All these gotchas remind me the days when I first started coding in JavaScript.
There are several corner cases, some of them work inconsistently across browsers,
some of the features you never want to use, somewhere you want to be extra
careful. All of those are well known in JavaScript land, but not so well in
MongoDB land.&lt;/p&gt;
&lt;p&gt;Almost every weird behavior listed here was found in the process of simulating
MongoDB in the project called
&lt;a href="https://github.com/meteor/meteor/tree/devel/packages/minimongo"&gt;Minimongo&lt;/a&gt;,
mostly by &lt;a href="https://twitter.com/glasser"&gt;David Glasser&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This article will be updated as new weirdnesses come to mind.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Update of 1 April 2014: I talked about some of these issues and some new gotchas
on SF Meteor Devshop, the recording of the talk is below. "Don't get bitten by
Mungos (or Mongos)":&lt;/p&gt;
&lt;iframe width="640" height="360" src="//www.youtube.com/embed/amaR4Aqe0s0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://news.ycombinator.com/item?id=7020300"&gt;Discuss on Hacker News&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>SICP and Me</title><link href="http://devblog.me/sicp.html" rel="alternate"></link><updated>2013-11-03T00:00:00-07:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2013-11-03:sicp.html</id><summary type="html">&lt;h1&gt;I am a bit late but it is still great!&lt;/h1&gt;
&lt;p&gt;&lt;img alt="A pic from 4Chan" src="https://d262ilb51hltx0.cloudfront.net/proxy/1*k5v65hJ2AxMM3gaZ8rxvEQ.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;As someone who didn't study Computer Science at top university [yet] I am continuously learning everything they would have taught me at school. Since my knowledge is quite eclectic, a lot of foundation is still missing.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Two month ago “Structure and Interpretation of Computer Programs” has been selected as my next learning target and I don't regret. After reading “On Lisp” and “The Little Schemer” SICP looked like a reasonable extension but I was wrong. If books mentioned above were rather practical and were focusing on work with the specific languages (Common Lisp and Scheme), SICP was giving more theoretical and abstract knowledge about computer languages and programming expressed with Scheme. I believe it could be done with any other language capable of passing functions and making closures (and I have heard they use Python to teach this course nowadays).&lt;/p&gt;
&lt;p&gt;Since I am a very lazy reader the video course was chosen over the book as a primary source. MIT OCW has a publicly available recording of the course directed by HP back in 1986 for HP employees. They have done a great job, AV quality is probably better than a dozen of JS Conf talks.&lt;/p&gt;
&lt;h2&gt;The Course&lt;/h2&gt;
&lt;p&gt;Course is lectured by the book authors: Sussman and Abelson. There is no surprise the concepts are explained so clearly and authentically. Every lecture can become an eye-opening story of the particular idea. Eventually all lectures fall into coherent story with a very simple conclusion: “There is no magic”.&lt;/p&gt;
&lt;p&gt;It starts with very easy concepts such as iteration, recursion or higher order functions. Despite simplicity of the subject, lectures are very interesting to watch as they are presented from unusual to me angle. Even though I am not a beginner in these things, the 25 years old video lecture surprised me. The surprise repeated later again when the professor proved the equality of data and functions — basic building blocks or primitives.&lt;/p&gt;
&lt;p&gt;Remember the first time you have heard about method dispatch or the event loop and lazy evaluation of some hip platform? What about so long awaited generators, streams and functional primitives in your favorite language? SICP, a course from last century may explain them much better than someone on Stack Overflow. Not only that, they will explain how to implement those in terms of language primitives.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Any sufficiently complicated C or Fortran program contains an ad hoc, informally-specified, bug-ridden, slow implementation of half of Common Lisp.” — Greenspun’s tenth rule&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Later, SICP reaches more advanced topics we don't usually see widely used in day to day engineering but they bring more insight on how things work. Y-Combinator to achieve recursion, metacircular evaluator, declarative and logical programming are only some examples.&lt;/p&gt;
&lt;p&gt;Eventually to dispel the rest of the magic there are solid 4 hours dedicated to implementation of Lisp on a register machine with further compilation and optimizations steps for performance and simple memory management techniques for the runtime. Remember, those are still from 1986 and the answer “Let us just implement it on JVM” didn’t exist.&lt;/p&gt;
&lt;h2&gt;SICP and Me&lt;/h2&gt;
&lt;p&gt;I certainly benefited from lectures. I improved my understanding of basic things and ensured my knowledge of more advanced concepts. In addition learnt about things I couldn't even describe, much less use in the real world out there.&lt;/p&gt;
&lt;p&gt;My experience was spoiled a little bit in the end when the topic pivoted from the promotion of high level concepts to low-level implementation details. In my opinion, too much time was dedicated to implementation (many hours were spent just writing code on a chalkboard).&lt;/p&gt;
&lt;p&gt;But it makes sense since the implementation was the way to dismiss magic and make things transparent, less abstract. And let’s not forget it is an introductory course after all (MIT 6.001 indicates its level).&lt;/p&gt;
&lt;p&gt;Never forget: primitives, means of combination and means of abstraction.&lt;/p&gt;</summary></entry><entry><title>One Year After</title><link href="http://devblog.me/one-year.html" rel="alternate"></link><updated>2013-10-27T00:00:00-07:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2013-10-27:one-year.html</id><summary type="html">&lt;h1&gt;My first year working in the Silicon Valley&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Awkward tourist at Google MV" src="https://d262ilb51hltx0.cloudfront.net/proxy/1*-4VvcOoTRtuHRLD9P8G1SQ.jpeg" /&gt;&lt;/p&gt;
&lt;h2&gt;Uncertain beginning&lt;/h2&gt;
&lt;p&gt;Just a couple of days ago I turned 19. This event is notable to me: not only I can buy cigarettes now (but won't) but also it’s been one year since my first ever employment on technical position. In the Valley.&lt;/p&gt;
&lt;p&gt;My first couple of months were filled with trepidation: how do I rent out an apartment? How to buy food without having a car. No SSN, no identity documents, no people to help us. You know, regular immigration hassle, plus very bad English.&lt;/p&gt;
&lt;p&gt;Later I started actually thinking of what I am going to do there. Alright, survived the first time, visited Stanford, Google HQ and a dozen of parks… What is next? The tourist part was over. I was dropped into a Hollywood movie but what was my role in it?&lt;/p&gt;
&lt;p&gt;My knowledge of programming was very limited. Enough to solve algorithmic challenges and to write small scripts in my daily life but nothing about building complex systems, creating beautiful apps or at least constructing basic HTML pages. Although I tried to learn, spent several weeks straight learning SQL, python, some web-technologies, I still couldn't figure out how to put things together so they work for good or for bad.&lt;/p&gt;
&lt;h2&gt;Collections&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Tony and Arman from Collections" src="https://d262ilb51hltx0.cloudfront.net/max/600/1*ugKMf9acqelQiGkep_hd0w.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;Things changed after meeting guys from Collections.me, early stage YC startup. On this part of the story I usually call myself ‘Mr. Lucky’ — they agreed to hire me, teach how to build things and give a salary large enough to pay for my rent and sustain my family while I am contributing to the codebase in a 2-story Hacker House based in Mountain View.&lt;/p&gt;
&lt;p&gt;Obviously, they couldn't hire me just because I am a good looking, smiling, talkative and social young man (I am just young). The team gave me several tasks to begin with: write a set of client-server programs in C with then serving a webpage and GUI interface, basic file manager with GTK+. GitHub still keeps the history: &lt;a href="https://github.com/Slava/slavadocs"&gt;slava-docs&lt;/a&gt;, &lt;a href="https://github.com/Slava/slavafinder"&gt;slava-finder&lt;/a&gt;. These repos look so cute today, right like your stick-figures drawings from the childhood box.&lt;/p&gt;
&lt;p&gt;Next 6 month I spent in Collections team contributing to Cocoa application, writing small IMAP proxy server with Node.js, building my own Windows 8 application and sometimes having fun with other hipster technologies used in our stack.&lt;/p&gt;
&lt;p&gt;Working in a 3-4 member team I had an opportunity to learn things the hard way. Finding help in the Internet, being self-serving, knowing when to ask for help and when to spend an extra time digging with debugger. Even how to cook simple food!&lt;/p&gt;
&lt;p&gt;More importantly this half of the year educated me to work in a team, communicate my needs and concerns about product direction. Even though I have made mistakes and sometimes did not speak up, I still learnt from those.&lt;/p&gt;
&lt;p&gt;And of course I had a lot of fun in the lovely hacker house with all the people who stayed in it and the Collections team: Jordan, Tony and Arman.&lt;/p&gt;
&lt;h2&gt;Uncertain April&lt;/h2&gt;
&lt;p&gt;In April Collections team decided to take a break. And that’s how I came to the job market. After some wonderful marketing support from my friends tens of companies and startups contacted me in the first day. Schedule was filled up with interviews, phone-screens and calls.&lt;/p&gt;
&lt;p&gt;Armed with an “interview passing” book I jumped right into the fire. Most of the phone-screens were ridiculously easy even with my short experience.&lt;/p&gt;
&lt;p&gt;Most startups viewed me as a potential “full-stack” developer which assumes a person who builds apps with all hipster technologies available. Those focused on questions about JavaScript quirks and the meaning of SSL-certs. Building CRUD apps for food — that’s what they asked for.&lt;/p&gt;
&lt;p&gt;Some startups were much better. Notably, &lt;a href="http://www.kamcord.com/"&gt;Kamcord&lt;/a&gt; founders gave a good batch of algorithmic questions over video chat, &lt;a href="https://heapanalytics.com/"&gt;Heap Analytics&lt;/a&gt; guys invited me to a one-day hacking session to their house and gave a reasonable task related to their startup. Also I had a nice tour to the Quora office and had a chance to talk to really cool engineers.&lt;/p&gt;
&lt;p&gt;Big companies like Google, Facebook, Palantir, Groupon and Zynga scheduled phone-screens with me stretching the interview process for a month. Couldn't stand the whole dance with the recruiting team I just skipped most of them.&lt;/p&gt;
&lt;p&gt;One day Matt from &lt;a href="http://www.meteor.com/"&gt;Meteor&lt;/a&gt; contacted me over email, he introduced as a “team of old MIT hackers” and invited me to Meteor Devshop “to look at the office and the community event”. After surprise 3-hour interview I accepted the offer the day after.&lt;/p&gt;
&lt;p&gt;That’s it! One week running around for interviews and two weeks of plain excitement waiting for the Meteor moment.&lt;/p&gt;
&lt;h2&gt;Meteor&lt;/h2&gt;
&lt;p&gt;&lt;img alt="One of the Monthly Meteor Devshops" src="https://d262ilb51hltx0.cloudfront.net/max/600/1*OkmtBNmDzXZpDBdfSn18vw.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;Honestly, I am still very surprised how I got there. One might say I have the Impostor Syndrome but that is the reality: all these people are way more qualified than me. The gap between experienced “old MIT hackers” who went through several companies or Google and me, novice in this game is way too big. And I work really hard to reduce it.&lt;/p&gt;
&lt;p&gt;It would be silly not to bother all these bright minds with questions about productivity, self-learning, engineering knowledge I need to acquire and the directions relevant to me.&lt;/p&gt;
&lt;p&gt;Having heard of MOOC I finally had free time to put my hands on free knowledge of the Internet. Taking core Computer Science classes clarified a lot of things and gave a bit more insight on how computers work.&lt;/p&gt;
&lt;p&gt;Not to mention the giant amount of knowledge I gained from working with fellow Meteorites. Reusable knowledge. Useful knowledge.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img alt="Me happy and shit" src="https://d262ilb51hltx0.cloudfront.net/max/1000/1*GM6-okRP86t6MlWG2JiI_A.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;The first working year in the Valley is over. I went through being a newbie who knows nothing but algorithms for TopCoder competitions to a newbie who knows a little bit more but is improving every day. This year might mean very little on my resume but certainly changed the direction of my life, thanks to all the people who helped me!&lt;/p&gt;</summary></entry><entry><title>Be the one owning the power</title><link href="http://devblog.me/be-the-one.html" rel="alternate"></link><updated>2013-09-03T00:00:00-07:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2013-09-03:be-the-one.html</id><summary type="html">&lt;p&gt;&lt;img alt="The guy reading CLRS" src="https://d262ilb51hltx0.cloudfront.net/proxy/0*bHmjV5zv7u8DzQQm.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;I am an example of a self-taught software engineer. ‘Self-taught’ doesn't really mean I learnt everything on my own. Having had so many teachers, I just forgot about college. It doesn't mean there is nothing to learn, I am learning a lot everyday. And this piece of writing is directed towards those who are in the beginning of their learning cycle.&lt;/p&gt;
&lt;p&gt;The following talks about the entire coding experience: the job you do, the things you try for fun, the project you have on weekends.&lt;/p&gt;
&lt;p&gt;Programming came to my life through logical puzzles rather than websites and phone applications. It was &lt;a href="http://en.wikipedia.org/wiki/Competitive_programming"&gt;competitive programming&lt;/a&gt;: competition of writing the most efficient algorithm to solve a well-defined problem in a limited amount of time.&lt;/p&gt;
&lt;p&gt;Having that experience, for a long time I was afraid of the industry: hours of writing verbose and dull code connecting a lot of pieces together didn't seem very interesting to me. My knowledge about the industry was very limited but this part was true: in a majority of projects you have to write heaps of tedious and repetitive code just connecting giant pieces of ready code together, “gluing” APIs of complex systems. Those work as magic boxes and the only thing left is to put them together. And that is the moment when our “programming skills” are applied.&lt;/p&gt;
&lt;p&gt;My problem is not in frameworks doing all the hard job and taking “all the fun code” we could possibly write. Frameworks are great, general solutions are great, people who built them are great. Seriously, it takes a lot of effort to build a general purpose “thing” (database or drawing library, doesn't matter).&lt;/p&gt;
&lt;p&gt;The problem to discuss is in us, beginning programmers and engineers. It’s really easy to get a false sense of incredible power coming from a great tool: you just learn a dozen of special commands to operate this beast and it builds the whole web-application for you! Beginner would feel an incredible leap forward from what he could do before.&lt;/p&gt;
&lt;p&gt;It really takes you several days to learn a new technology you could possibly use in your next project and write a blog post about your progress. And the next day thousands of guys and girls will read the front page of Hacker News full of “How I connected X with Y and used it for 2 weeks, here are awesome micro-benchmarks” type of titles, where X and Y can be any of the modern mainstream technologies.&lt;/p&gt;
&lt;p&gt;There is nothing bad in exploring those things. It’s just not the best thing to focus on as a beginner.&lt;/p&gt;
&lt;p&gt;Learning the concepts is much more important.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Learning ideas that allow the great solutions to come should precede blindly running through tens of technologies built on top of those ideas.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Once programmer understands the magic running inside another black box, he can find out magic doesn't exist, which may be the sad news for one but a lot of power to another. &lt;em&gt;Be the one owning the power.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I have seen this answer to the following question on &lt;a href="http://www.quora.com/Computer-Programming/What-are-the-things-you-wish-you-knew-when-you-started-programming-for-the-first-time"&gt;Quora&lt;/a&gt;: “What are the things you wish you knew when you started programming for the first time?”.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;That it's better to know more algorithms than more programming languages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Good answer. But it goes further: get to know several programming languages, learn the paradigms behind them, discover the ways people come to these paradigms. It can go meta even further in all directions.&lt;/p&gt;
&lt;p&gt;Every database has some fundamental principles shared across them. Those principles can be found in different categories. At the end of the day, we all know the clever things that came out of research and thinking based on a lot of both practical and theoretical knowledge.&lt;/p&gt;
&lt;p&gt;Perhaps, after spending time investigating, researching and learning the fundamentals of databases you will better understand those benchmarks you measured last friday.&lt;/p&gt;
&lt;p&gt;I met people of different ages and different experience claiming “you don't really need all that theoretical stuff”. A lot of people carelessly say kids don't need all that Computer Science stuff to become a programmer, nobody even goes to school. I hear it especially a lot as I am one of those kids who started coding without going to college, but I disagree.&lt;/p&gt;
&lt;p&gt;One could argue: you certainly won't use all the CS curriculum got at college if you are building hundreds of websites looking alike, making small tweaks for every new client. If that’s what you want to do all your life — you are fine, but I have a different plan for myself.&lt;/p&gt;
&lt;p&gt;Avoiding the “hard parts” of programming will never end well. One day such programmer will hit his limit of gluing database with a front-end framework and a search engine building CRUD applications. He will stop learning as he would think everything is already learnt. And after being bored for a while this programmer would start measuring the performance of another NoSQL database right before getting in the argument of big data future on a mailing list.&lt;/p&gt;
&lt;p&gt;Please, don't do it. Evolve, discover new areas of programming. Again, not necessarily the new frameworks, but rather — the concepts, ideas, approaches people came up with over decades since machines were born.&lt;/p&gt;
&lt;p&gt;You might think, all the theory from books and papers is boring and useless. But look around. Application of all the theory is really near you all the time. Have you ever wondered how the compiler works? How to implement your own toy programming language? How does git store your history and does it so fast and efficiently? How does the diff utility work? Won't it be fun to implement the differing algorithm on your own given the paper and detailed explanation? Can we build the modified version optimized for written text (words, sentences, paragraphs) rather than source code? How do social networks understand what news are relevant to us, can I build my own system of recommendations? You can start by “hacking” on these problems next weekend or commitment-free evening.&lt;/p&gt;
&lt;p&gt;Further, you might find a gig that will allow you to explore new and challenging areas everyday. You might not want that but I do and that’s the plan for my education. The real and applied one.&lt;/p&gt;
&lt;p&gt;This kind of learning really changed my view on the industry. I see myself growing as a software engineer and “making things” is also involved here. I really wish it came to me earlier.&lt;/p&gt;
&lt;p&gt;I don't mean to dig textbooks all day, see, I actually encourage you do go and build things with your new knowledge.&lt;/p&gt;</summary></entry><entry><title>How JavaScript Hoisting can be dangerous</title><link href="http://devblog.me/js-hoisting.html" rel="alternate"></link><updated>2013-06-26T00:00:00-07:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2013-06-26:js-hoisting.html</id><summary type="html">&lt;p&gt;I learnt the way scoping and hoisting work in JS early enough so I didn't get
into these pitfalls. My thinking was, hoisting is so innocuous, it can't be
tricky once you know it exists. Today I randomly came up with this example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Global object, window in browser or global in node&lt;/span&gt;
&lt;span class="nx"&gt;G&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hoistingExample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// this is global for sure&lt;/span&gt;
  &lt;span class="nx"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;global answer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// looks like we are modifying global var&lt;/span&gt;
  &lt;span class="nx"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// create new local var&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;hoistingExample&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Looks like it is really easy to forget about hoisting dealing with global and
local variable sharing same name as shadowing happens in the beginning of the
function as supposed to the place where you actually declare local variable.&lt;/p&gt;
&lt;p&gt;I didn't fail on this yet, but pretty sure, it may happen soon, will keep you
posted.&lt;/p&gt;</summary></entry><entry><title>Notes about book: Don't go back to school</title><link href="http://devblog.me/dont-go-back-to-school-book.html" rel="alternate"></link><updated>2013-05-25T00:00:00-07:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2013-05-25:dont-go-back-to-school-book.html</id><summary type="html">&lt;p&gt;Take aways from "Don't go back to school" by Kio Stark&lt;/p&gt;
&lt;p&gt;Book presents us dozen of stories from different people in different industries.
Each of them bypassed school in some sense but managed to achieve mastery in his
or her profession including developed professional networks and recognition.&lt;/p&gt;
&lt;p&gt;Notably, most of them are artists and only some of them are software engineers
and entrepreneurs. It makes sense: since you will be smashed away in most areas
where formal education is mandatory it is very difficult to find successful
people without anything but passion to the work.&lt;/p&gt;
&lt;p&gt;Note, most of the main heroes in the book hold bachelor degree and speak about
MBAs and MFAs. I noticed only one or two guys dropped out from the high school
but those are exceptions rather than general rule.&lt;/p&gt;
&lt;p&gt;Seems like there are three main pros of a &lt;em&gt;good&lt;/em&gt; college:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You actually learn stuff&lt;/li&gt;
&lt;li&gt;You learn how to learn outside the school&lt;/li&gt;
&lt;li&gt;You develop a network of connections&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Book shows that all of them are accessible without spending years in school but
rather spending same amount or more working hard in the heart of hell-fire.&lt;/p&gt;
&lt;h2&gt;On learning stuff&lt;/h2&gt;
&lt;p&gt;Some people can learn everything simulating classroom
environment watching online courses and doing homeworks. Others just can't learn
this way and find their own path to knowledge. It may or may not be chaotic way,
picking elements of puzzle from different places asynchronously (lazily) as you
need them. You may end up with very distributed and incomplete knowledge but it
is usually good enough to get work done. In case of achieving fulsome acumen
of deep knowledge it might be a good start that keeps you motivated but can't be
enough. You will need to fill in the gaps eventually learning the subject "the
hard way".&lt;/p&gt;
&lt;h2&gt;On learning how to learn&lt;/h2&gt;
&lt;p&gt;It comes with experience of successes and more importantly failures. One could
realise that he or she doesn't benefit much from classic textbooks after
spending descent amount of time learning this way. Find the way that fits you
but remember it may vary from subject to subject.&lt;/p&gt;
&lt;h2&gt;On network of connections&lt;/h2&gt;
&lt;p&gt;Visit meetups and dev-shops directly related to your profession. Try to meet
new people you share interests with. Some people mentioned in the book organized
clubs and meetups themselves. It is surely harder than having dedicated meetups
in school (classes?) but it is a way.&lt;/p&gt;
&lt;p&gt;Do not restrict yourself to professional circles. As everybody knows: you will
never know.&lt;/p&gt;</summary></entry><entry><title>Fibers</title><link href="http://devblog.me/fibers.html" rel="alternate"></link><updated>2013-05-24T00:00:00-07:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2013-05-24:fibers.html</id><summary type="html">&lt;h2&gt;What&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Fibers&lt;/code&gt; is an npm module developed with C++. It is another flow control library like async, nue, batch, cascade, then, afuture and others. The biggest disadvantage of &lt;code&gt;Fibers&lt;/code&gt; - they work only inside node.js. It is applicable only on server and will never work in your browser (at least because it is very JS engine specific library).
Checkout &lt;a href="https://github.com/laverdet/node-fibers"&gt;the repo on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This library implements &lt;a href="http://en.wikipedia.org/wiki/Coroutine"&gt;coroutines&lt;/a&gt;. I imagine each fiber as a light-weight thread(for normal people these two words might mean the same thing) but fibers use co-operative multitasking. Fibers don't run simultaniously, each fiber takes its time to accomplish something small and then yields the execution flow to other fibers and waits for next time it is given control.&lt;/p&gt;
&lt;h2&gt;Why&lt;/h2&gt;
&lt;p&gt;The main reason I see anyone using some flow control library by default: every I/O function in node.js (file system reads/writes, web requests, database access) is an asynchronous function that invokes a callback on success or error.&lt;/p&gt;
&lt;p&gt;First of all, your code may end up looking really ugly. Writing a quick code you may consider &lt;a href="http://callbackhell.com/"&gt;pyramids of callbacks&lt;/a&gt; 'good enough' but once your application gets bigger, fatter or more serious you will need to manage it with more named functions, use less lambda functions or use a flow control library.&lt;/p&gt;
&lt;p&gt;People found some some approaches: futures, promises, signals. All are the same thing: some abstract object representing an action (or set of actions) running.&lt;/p&gt;
&lt;p&gt;The second reason could be a reasonable substitution for threads. Fibers can give you some sort of multitasking in single-threaded Javascript.&lt;/p&gt;
&lt;h2&gt;How&lt;/h2&gt;
&lt;p&gt;After you get &lt;code&gt;Fibers&lt;/code&gt; npm module you can start:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm install fibers
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Require fibers library like anything else:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Fiber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fibers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To create a fiber just pass any function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fiber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Fiber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I am inside fibers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can run it invoking the &lt;code&gt;run&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fiber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can get the instance of fiber you are running in object &lt;code&gt;Fiber.current&lt;/code&gt; and get the number of running fibers by accessing &lt;code&gt;Fiber.fibersCreated&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There is the third member available: &lt;code&gt;yield&lt;/code&gt;. That is where magic happens. It gives control to the caller of fiber. Everything you had in stack on fiber will be remain untouched and accessible when you will run the fiber next time. Once fiber function returns it will roll back to its original state - empty stack.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Fiber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;Fiber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;Fiber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Will run the fiber: &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running this code will give you following output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Will run the fiber: 0
0
Will run the fiber: 1
1
Will run the fiber: 2
2
Will run the fiber: 3
0
Will run the fiber: 4
1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can see how the fiber preserves the stack vars and starts over when it returns. We could show a bit more complicated example to prove that the whole stack is preserved.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Fiber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;Fiber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;ff&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;Fiber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;ff&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Will run the fiber: &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;Will run the fiber: 0
0 0
Will run the fiber: 1
0 -1
Will run the fiber: 2
1 0
Will run the fiber: 3
1 -1
Will run the fiber: 4
0 0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The next thing to learn is how to pass new values inside fiber: you can invoke the &lt;code&gt;run&lt;/code&gt; method with an argument. This argument will be returned by &lt;code&gt;yield&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Fiber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;passed %s, get something new&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Fiber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;now it is %s!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;string number &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;passed string number 0, get something new
now it is string number 1!
passed string number 2, get something new
now it is string number 3!
passed string number 4, get something new
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Similarly you can pass some argument to &lt;code&gt;yield&lt;/code&gt; and it will be returned by &lt;code&gt;run&lt;/code&gt; command. Now we can create a generator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// next - how many jumps further we want to make&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;factorialGenerator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Fiber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// default number of jumps to 1&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;underfined&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;factorial&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Fiber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;f3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;factorialGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;f7&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;factorialGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;f7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;6 5040
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's how we use fibers, it is not easy to wrap your head around it from the first time and you don't need to. Most of the time you will be using an abstraction layer on top of fibers and &lt;code&gt;Fibers&lt;/code&gt; comes with one built-in called &lt;code&gt;Future&lt;/code&gt;. We will have a look at it in next blog-post. For now I want to finish with some words of wisdom:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It took me time to realize: Fibers are just very structured goto&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;David Glasser&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Pushdown Automata Revelation</title><link href="http://devblog.me/pda-revelation.html" rel="alternate"></link><updated>2013-05-07T00:00:00-07:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2013-05-07:pda-revelation.html</id><summary type="html">&lt;p&gt;Today a revelation happened to me.&lt;/p&gt;
&lt;p&gt;I remember approximately three years ago, back in the high school, I was solving algorithmic problems for fun. One of the problems was to parse and calculate and arithmetic expression. &lt;/p&gt;
&lt;p&gt;Allowed symbols/operators were: '+', '-', '*', '/', 'sin', 'cos', '(', ')' and numbers were decimals. It was so hard to code a solution for this problem, handling all the cases was easy compared to structuring your procedural program written in C. I remember writing 5 procedures calling each other parsing expression.&lt;/p&gt;
&lt;p&gt;Today I have watched video on Coursera about push down automatas and it occurred to me: Did I build implicit automata 3 years ago?&lt;/p&gt;
&lt;p&gt;Looks like I used these procedures as states and used recursion stack as automata stack :). It wasn't clear to me how to make up a 'final state' so I used global variable and set it to true when my code failed to parse the expression.&lt;/p&gt;
&lt;p&gt;It is fun to see how I had written such stuff long time ago and made a 'full circle' in this sense. I like this feeling, I like programming :).&lt;/p&gt;
&lt;p&gt;my 3 years old code: http://pastebin.com/JUeXLeea 
debug version of this code: http://pastebin.com/JYUaibem
online judge with unit tests: http://acmp.ru/index.asp?main=task&amp;amp;id_task=451 (in Russian)&lt;/p&gt;</summary></entry><entry><title>When single paged apps suck</title><link href="http://devblog.me/when-single-paged-apps-suck.html" rel="alternate"></link><updated>2013-05-02T00:00:00-07:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2013-05-02:when-single-paged-apps-suck.html</id><summary type="html">&lt;p&gt;Today was a very hot day and it was clear: it's not the day you want to spend sitting in front of Starbucks on Castro street. We took an approach of changing environment and moved to Mountain View public library. It is where we were caught by.&lt;/p&gt;
&lt;p&gt;Library is an excellent place for focused work. It is quite, clean, still not home and people around increase your productivity. There is good coverage of Google Wifi and couple of fairly good desks.&lt;/p&gt;
&lt;p&gt;Unexpectedly Google Wifi acted a bit weird. Some pages did not load properly, some others were rendered with corrupted characters and made an impression of movies talking about government collusions, hackers, aliens trying to intercept into our Facebook feed.&lt;/p&gt;
&lt;p&gt;I don't know if it is intended behavior of Internet connection in public libraries but there is no single page loaded without being corrupted. It was fine with good-old HTML pages - browser is clever enough to render half-broken styles and layouts and show something readable.&lt;/p&gt;
&lt;p&gt;The problem was in single-paged apps: Quora, Instagram and Twitter. With all these fancy ajax requests they could not read corrupted JSON-encoded data received from server and refused to show anything meaningful with lots of errors in js-console.&lt;/p&gt;
&lt;p&gt;That's how library increases your productivity. Read plain HTML-pages, read Wikis, use Google.&lt;/p&gt;
&lt;p&gt;Looks like excellent place for couple of hours of focused work but you can not download PDFs, send big files or work with any documents with complicated schemas.&lt;/p&gt;
&lt;p&gt;It was my first time when single-paged apps sucked so much.&lt;/p&gt;</summary></entry><entry><title>TCO 2013 2A</title><link href="http://devblog.me/tco-2013-2a.html" rel="alternate"></link><updated>2013-03-31T00:00:00-07:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2013-03-31:tco-2013-2a.html</id><summary type="html">&lt;p&gt;This round was spent in agony, as any other round I participate after several months of inactivity.&lt;/p&gt;
&lt;p&gt;My biggest mistake in this round was pretty silly: I expected 300 to be a standard math/greedy problem and couldn't realise it was the simplest dynamic programming problem ever met on Topcoder.&lt;/p&gt;
&lt;p&gt;After an hour of looking for "universal greedy" I gave up and prepared several test cases for challenge phase.&lt;/p&gt;
&lt;p&gt;I got lucky during challenge phase and could achieve 50 pts. It is not much but I still consider myself quite lucky getting something in room full of red-yellow coders.&lt;/p&gt;
&lt;p&gt;Ironically, a lot of bluish-yellowish coders solved 300 with no problems. Next time, after spending N minutes on greedy solution, I will pivot to dp, as I did it before.&lt;/p&gt;
&lt;p&gt;After the round this solution seems the most obvious thing. Unfortunately I did a wrong assumption that no dp is applicable.&lt;/p&gt;
&lt;p&gt;The funny thing is: a lot of coders failed with greedy solutions on system test phase and I jumped to fourth hundred. That spoiled round gave me some positive rating and lesson for future.&lt;/p&gt;
&lt;h3&gt;Code&lt;/h3&gt;
&lt;p&gt;300 solved right after round:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TheLargestString&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
                &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;mp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Less known Y combinator</title><link href="http://devblog.me/less-known-y-combinator.html" rel="alternate"></link><updated>2013-03-30T00:00:00-07:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2013-03-30:less-known-y-combinator.html</id><summary type="html">&lt;p&gt;We all know the YCombinator company. But where did the name come from?&lt;/p&gt;
&lt;p&gt;Since I didn't get my degree in Computer Science yet, I was surprised by its origin. Found it accidetally and loved it.&lt;/p&gt;
&lt;iframe src="http://player.vimeo.com/video/45140590" width="500" height="400" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="http://vimeo.com/45140590"&gt;Link.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Those who are lazy can look it up in Wikipedia.&lt;/p&gt;
&lt;p&gt;Spoiler from video: javascript version of Y Combinator looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;))(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
       &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;))(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So as far as I got it: Y combinator is higher order function that gets function improver and produces infinitively better function applying improver. Now we understand the meaning of Paul Graham's startup funding company, it takes company and makes it infinitively better and bigger, at least it trys to.&lt;/p&gt;</summary></entry><entry><title>Good grid view for Cocoa app</title><link href="http://devblog.me/good-grid-view-for-cocoa-app.html" rel="alternate"></link><updated>2013-03-19T00:00:00-07:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2013-03-19:good-grid-view-for-cocoa-app.html</id><summary type="html">&lt;p&gt;There are different styles of presenting data but there is one that is used whenever you need to present lots of data and each piece has its own visual representation. I am talking about grid with big icons representing the data. Sometimes working on Cocoa application, built-in &lt;code&gt;IKImageBrowser&lt;/code&gt; does not satisfy our needs. &lt;code&gt;OEGridView&lt;/code&gt; comes to help.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OEGridView&lt;/code&gt; is part of &lt;a href="http://openemu.org/"&gt;OpenEmu&lt;/a&gt; project which is awesome by itself. There are a lot of things you can learn just reading &lt;a href="https://github.com/OpenEmu/OpenEmu"&gt;code of the project&lt;/a&gt;. Grid view representing collections of games with cool covers is one of them.&lt;/p&gt;
&lt;p&gt;Similary to &lt;code&gt;IKImageBrowser&lt;/code&gt; custom grid is based on layers. There is a sublayer of main layer for each cell. Layers are chosen over views due to performance reasons. Another optimization is reusing all cells, which are not visible at the moment.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OEGridView&lt;/code&gt; has two protocols as any other Cocoa control: delegate and data source.&lt;/p&gt;
&lt;p&gt;Data source is identical to &lt;code&gt;NSTableView&lt;/code&gt; with slightly changed API. Same situation is with delegate by the way.&lt;/p&gt;
&lt;p&gt;The only worry is custom &lt;code&gt;OEGridViewCell&lt;/code&gt; subclass, which is subclass of &lt;code&gt;CALayer&lt;/code&gt;. Visual representation can be achieved with bunch of sublayers arranged in correct order.&lt;/p&gt;
&lt;p&gt;Issue you can meet after implementing fency cell layer: renaming of title in &lt;code&gt;OEGridView&lt;/code&gt; is hoping that title is actually a subclass of &lt;code&gt;CATextLayer&lt;/code&gt; and is easily accessible with mouse double click. So placing title layer in unusual place can block the renaming feature.&lt;/p&gt;
&lt;p&gt;Another issue I ran into was the fact that grid view reuses cell instances. &lt;code&gt;- (OEGridViewCell *)gridView:cellForItemAtIndex:&lt;/code&gt; should be implemented in the way similar to this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OEGridViewCell&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;gridView:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OEGridView&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;gridView&lt;/span&gt; &lt;span class="nf"&gt;cellForItemAtIndex:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSUInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;index&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Maybe cell on such position already exists?&lt;/span&gt;
    &lt;span class="n"&gt;MYCustomGridViewCell&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MYCustomGridViewCell&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;gridView&lt;/span&gt; &lt;span class="nl"&gt;cellForItemAtIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="nl"&gt;makeIfNecessary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// If not, maybe there are cell instance we can reuse&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MYCustomGridViewCell&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="n"&gt;gridView&lt;/span&gt; &lt;span class="n"&gt;dequeueReusableCell&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// OK, create new one&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;MYCustomGridViewCell&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// Set the binding&lt;/span&gt;
    &lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="nl"&gt;objectAtIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objectBinding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So you reuse maximum of cells you can. And do not forget to override the &lt;code&gt;- (void)prepareForReuse&lt;/code&gt; method. The issue I had with this method was quite funny. In this preparation method I was preparing the cell in very hard way: clearing all layers and properties. But did not update the layers if the new binding object was the same object it was binded to before.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/indragiek"&gt;Indragiek&lt;/a&gt; has done a great job and extracted &lt;code&gt;OEGridView&lt;/code&gt; classes. Check out &lt;a href="https://github.com/indragiek/OEGridView"&gt;the repo on github&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>TCO 2013 Qual 1A</title><link href="http://devblog.me/tco-2013-qual-1a.html" rel="alternate"></link><updated>2013-02-23T00:00:00-08:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2013-02-23:tco-2013-qual-1a.html</id><summary type="html">&lt;p&gt;Every year TCO qualification rounds attract attention of thousands of coders. Not just active TopCoder participants but old veterans and newcommers as well. For me it was just another round with lowered difficulty. Let's look into it.&lt;/p&gt;
&lt;h3&gt;250&lt;/h3&gt;
&lt;p&gt;Problem was extremely simple and was intended to test implemenation skills. Ususal difficulty level for second division easy problems. A lot of correct submits in first minutes, very low fail rate.&lt;/p&gt;
&lt;h3&gt;500&lt;/h3&gt;
&lt;p&gt;Problem involved some math or geometry on plane (depends on solution). I am usually very bad at such problems and this was not exception. Wasting more than 20 minutes on it I came up with approximating solution which was wrong and it failed on system test as expected. Some solutions (correct ones) failed due to time limit, probably because of massive calculations in real numbers (&lt;code&gt;double&lt;/code&gt; in C++/Java). Those are very slow compared to integer calculations. I could successfully challenge one solution (the only successful challenge in room) and fail three times. Lost 25 points on challenge phase.&lt;/p&gt;
&lt;h3&gt;1000&lt;/h3&gt;
&lt;p&gt;The first time I am sure in my solution for 1000. Ususally I try to submit some facile code but today it made my day.&lt;/p&gt;
&lt;p&gt;From the first sight I recognized my favorite mincost-maxflow problem. Looks like this problem was intended to be implementation based difficult. As I had pre-written MCMF algo I just constructed correct net and submitted for 565 pts (spent a lot of time actually debugging old pre-written code).&lt;/p&gt;
&lt;p&gt;Solution: we need to construct directed graph which has only simple cycles. It means every vertix in graph has one incomming and one outcomming edge. We can construct bipartite graph. For outcomming edges count on the left and incomming ones on the right. As total number of vertixes in table with $R$ rows and $C$ columns will not be very big, we can use $O(N^3)$ algorithm (actually it is $O(MN)$ algo but it is bipartite graph). $$R \times C \times 2 \le 512$$&lt;/p&gt;
&lt;h3&gt;Code&lt;/h3&gt;
&lt;p&gt;250 - HouseBuilding&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;go&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HouseBuilding&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;getMinimum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;area&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;area&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;1000 - DirectionBoard&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;U&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;D&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;L&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;R&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DirectionBoard&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;getMinimum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;MCMF&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;MCMF&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;MCMF&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;MCMF&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;allD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;UDLR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;MCMF&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;allD&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;allD&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MCMF&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;mincost_maxflow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;MCMF namespace has functions for mincost-maxflow algorithm implemented with dijkstra for finding shortest paths.&lt;/p&gt;</summary></entry><entry><title>SRM 571</title><link href="http://devblog.me/srm-571.html" rel="alternate"></link><updated>2013-02-19T00:00:00-08:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2013-02-19:srm-571.html</id><summary type="html">&lt;p&gt;This is 3rd SRM I participated in 2013. After failing SRM 568 and SRM 569 with really silly mistakes I decided to ascend my rating finally.&lt;/p&gt;
&lt;h3&gt;250&lt;/h3&gt;
&lt;p&gt;Looks very easy and it is. We are given $N$ strings of type "1.mp3", "2.mp3", etc. We need to sort them lexicographically and return top 50 strings. There are bunch of different correct solutions but idea is the same: if $N \le 50$ then we just compute every string and sort resulting array. Else we need to consider some big numbers close to power of ten.&lt;/p&gt;
&lt;p&gt;It might sound funny but I managed to put bug in easiest solution. Then reubmitted it for 149 points instead of ~220 points. Regardless huge disappointement I was happy that could submit &lt;em&gt;something&lt;/em&gt; working as last two rounds I failed even easy problems.&lt;/p&gt;
&lt;p&gt;Challenge phase brought me another 50 points challenging guy with different bug.&lt;/p&gt;
&lt;h3&gt;500&lt;/h3&gt;
&lt;p&gt;This problem was about finding clique in a graph of up to $50$ vertices maximizing total weight of picked. Another constraint was: clique should include at least $\frac{2}{3}$ of total number of vertices.&lt;/p&gt;
&lt;p&gt;First thing everybody probably noticed: looking for optimal clique is NP-hard problem, so exclude anything polynomial here.&lt;/p&gt;
&lt;p&gt;Second is obvious constraint: $\frac{2}{3} \times n \le 16$. It means there is something to do with it. I could not come up with anything better than quite stupid backtracking approach with some sorting for better pruning. It looks like I am still bad in math and it worked slower than expected and failed on system test.&lt;/p&gt;
&lt;p&gt;During Challenge phase my solution defended two challenges but it did not help in the end.&lt;/p&gt;
&lt;p&gt;I saw several greedy solutions and one DP in my room: all failed. Approach is backtrack but from different end (you do not expect it to be that easy, right?). Someone found Bron-Kerbosch algorithm in &lt;a href="http://en.wikipedia.org/wiki/Bron%E2%80%93Kerbosch_algorithm"&gt;wiki&lt;/a&gt; but failed. Another approach was greedy solution combined with random shuffles (not first time I notice such randomizing crap work).&lt;/p&gt;
&lt;p&gt;In the practice session I could implement correct solution in minutes which leads to well known conclusion: in TopCoder idea of the solution tends to be much harder and more important than implementation details. That is the reason we love it.&lt;/p&gt;
&lt;p&gt;Solution: for given subset of vertices find any non-connected pair. If there is no such pair it means we found clique, return sum of subset as the best answer. Else there are two ways: try look at subset with out the first bad vertix or with out the second one. It looks exponential and it is but number of different branches do not exceed $2^{16}$ as we are not interested in small subsets.&lt;/p&gt;
&lt;h3&gt;In the end&lt;/h3&gt;
&lt;p&gt;I was one of majority with one solved problem and less than 200 points which brought me tiny amount of rating. It feel like it would take enormous amount of effort to come back to middle-yellowish position.&lt;/p&gt;
&lt;p&gt;A lot of people from KZ participated today. Even guys from Palo Alto. Even from Kharkov. Keep it up, guys!&lt;/p&gt;
&lt;h3&gt;Code&lt;/h3&gt;
&lt;p&gt;250 - FoxAndMp3&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;toStr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;stringstream&lt;/span&gt; &lt;span class="n"&gt;strm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;strm&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.mp3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;strm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toStr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;doit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FoxAndMp3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;playList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;stringstream&lt;/span&gt; &lt;span class="n"&gt;strm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;strm&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.mp3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;doit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;500 - MagicMolecule&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;need&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;magicPower&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;magicBond&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt; &lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bitcount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;need&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;badA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;badB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1LL&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1LL&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;magicBond&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;N&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;badA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;badB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;badA&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1LL&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;magicPower&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1LL&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;badA&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1LL&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;badB&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MagicMolecule&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maxMagicPower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;magicPower&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;magicBond&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;magicBond&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;magicBond&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;magicPower&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;magicPower&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;magicPower&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;&lt;/span&gt; &lt;span class="n"&gt;need&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;need&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1LL&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Applescript</title><link href="http://devblog.me/applescript.html" rel="alternate"></link><updated>2013-01-31T00:00:00-08:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2013-01-31:applescript.html</id><summary type="html">&lt;p&gt;In Collections we used Applescript in our tech. stack for deep integration with OS X and there are my thoughts about it and its usage.&lt;/p&gt;
&lt;p&gt;What is Applescript for me? Another technology I use to achieve certain result. But Applescript looks different from any other *script language (hate you, love you, JS).&lt;/p&gt;
&lt;p&gt;If you look at it closer, Applescript was designed to be easy to get automation tool. Deep integration with OS X and very natural syntax. Long statements come up together to construct script, very readable script, script in plain English. It might look strange at first sight but such readability brings a lot of benefits, you have probably already felt it if got hands dirty with Objective-C.  Here I would admit, Apple did great job.&lt;/p&gt;
&lt;p&gt;The Power of Applescript is in applications supporting it. Richer programming interface is, more opportunities you get. That is very important as you do not mess up with UI, programming mouse movements and virtually hitting keyboard for every simple action. Something, &lt;a href="http://www.autohotkey.com/"&gt;AutoHotKey&lt;/a&gt; missed in Windows, right?&lt;/p&gt;
&lt;p&gt;Bad thing: it is difficult to find good tool for developing. Built-in Applescript Editor does the job fairly well. Replies and Events on bottom pane make debugging much easier, but failure codes like "-1000201" on crashes will make you use modern search engines couple of times. I found it strange, but behavior of my scripts differed in XCode, Applescript Editor and &lt;code&gt;osascript&lt;/code&gt; cli utility.&lt;/p&gt;
&lt;p&gt;Applescript is good for fast and easy automation of GUI apps and I heard it works perfect with Automator. It can help, if you need some way to get information from other apps in your Cocoa app (as we did in Collections) calling it from Objective-C code. Also it is still good in scripting AHK way.&lt;/p&gt;
&lt;p&gt;Applescript is still bad for real programming. One can write GUI applications on Applescript and be quite successful in it but I am not that crazy. Absence of good debug tools makes it even worse.&lt;/p&gt;
&lt;p&gt;Some bonus. You always can find syntax descriptions and tutorials with comprehensive skill of using google, but there are some tips for you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Applescript is OO-language. And do not let reverse order in &lt;code&gt;the selection of the document of window number 2 of first application&lt;/code&gt; confuse you.&lt;/li&gt;
&lt;li&gt;There are some natural things that help you. E.g.: &lt;code&gt;items&lt;/code&gt; will be equal to &lt;code&gt;every item&lt;/code&gt; which is really nice.&lt;/li&gt;
&lt;li&gt;Some scope confusing may stop you, but remember to use very powerful keyword &lt;code&gt;my&lt;/code&gt; or statement &lt;code&gt;of me&lt;/code&gt; referring to current object, &lt;code&gt;this&lt;/code&gt; or &lt;code&gt;self&lt;/code&gt; in other languages.&lt;/li&gt;
&lt;li&gt;Be careful with reserved words, sometimes they may appear from nowhere.&lt;/li&gt;
&lt;li&gt;Use built-in documentation (in Applescript editor &lt;code&gt;File-&amp;gt;Open Dictionary...&lt;/code&gt;) with docs for installed apps. If you do not find app you need, try manually open app bundle through &lt;code&gt;browse...&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You are bash-guru? Csh-ninja? Maybe zsh-rockstar? &lt;code&gt;do shell "..."&lt;/code&gt; is your friend then. Bring power of command line tools to your hacky scripts.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quoted form of thePath&lt;/code&gt; quotes strings, works best with filesystem paths.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Slava Kim, messed with Applescript for week in January 2013.&lt;/p&gt;</summary></entry><entry><title>Python development environment</title><link href="http://devblog.me/python-development-environment.html" rel="alternate"></link><updated>2013-01-16T00:00:00-08:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2013-01-16:python-development-environment.html</id><summary type="html">&lt;p&gt;Few weeks ago I spent ten days building simple web application on top of Tornado web-server and ElasticSearch. There are some tips I learnt for setting comfortable environment for python development.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Do not mess with global packages, use &lt;a href="http://www.virtualenv.org/"&gt;virtualenv&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Do not mess with virtualenvs, use &lt;a href="http://virtualenvwrapper.readthedocs.org/"&gt;virtualenvwrapper&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Do not mess with packages from system repositories, use &lt;a href="http://www.pip-installer.org/"&gt;pip&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Do not mess with python’s interactive prompt, use &lt;a href="http://ipython.org/"&gt;ipython&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Everything is so simple but I could not imagine searching for such tools without help of senior developer.&lt;/p&gt;
&lt;p&gt;You can have several python projects to develop. If you try to use your global system scope to satisfy all requirements of your projects you will end up with messed packages, cause different projects might require different versions of same package and some other minor issues. &lt;code&gt;virtualenv&lt;/code&gt; creates separate scope for every project.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;virtualenv&lt;/code&gt; is an excellent tool, but it can become even better. It is easy to use but still requires a lot of routine commands. &lt;code&gt;virtualenvwrapper&lt;/code&gt; solves this problem. It creates bunch of useful aliases so managing virtual environments become a piece of pie.&lt;/p&gt;
&lt;p&gt;How do you install python libs? Do you download source/binaries and put pieces together manually? Maybe you are newbie and like to install everything using system repositories (apt-get, yum or brew) as I loved before. The right way for python related packages is using &lt;code&gt;easy_install&lt;/code&gt; or &lt;code&gt;pip&lt;/code&gt; (everybody says last &lt;a href="http://stackoverflow.com/questions/3220404/why-use-pip-over-easy-install"&gt;is better&lt;/a&gt;). The awesome part is - it works great with &lt;code&gt;virtualenv&lt;/code&gt; and makes life much easier. You &lt;a href="http://stackoverflow.com/questions/5226311/installing-specific-package-versions-with-pip"&gt;can get&lt;/a&gt; different versions of same package. You can easily get list of all packages installed in current environment running &lt;code&gt;pip freeze&lt;/code&gt; and then use output to deploy (e.g. &lt;a href="http://heroku.com"&gt;Heroku&lt;/a&gt; uses &lt;code&gt;requirements.txt&lt;/code&gt; file generated by &lt;code&gt;pip freeze&lt;/code&gt; to read dependencies).&lt;/p&gt;
&lt;p&gt;Last thing. As a unexperienced developer I faced such situation a lot of times: I want to try some piece of code, but I do not want run whole project for that, instead I run REPL. The problem is python default REPL doesn't even provide code completion. &lt;code&gt;IPython&lt;/code&gt; is a great project which can help you in this. It provides very customized REPL with all good stuff you can imagine: code completion, auto-intend, inspector of any python object, built-in magic commands and much more. In latest versions it is not just good REPL anymore, check out there IPython Notebook which awersome.&lt;/p&gt;
&lt;p&gt;As for now, I feel really good in such environment and hope I do not waste much time on typing and debugging but on actual building things.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.virtualenv.org/"&gt;virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://virtualenvwrapper.readthedocs.org/"&gt;virtualenvwrapper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pip-installer.org/"&gt;pip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ipython.org/"&gt;ipython&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Cocoa learning</title><link href="http://devblog.me/cocoa-learning.html" rel="alternate"></link><updated>2013-01-15T00:00:00-08:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2013-01-15:cocoa-learning.html</id><summary type="html">&lt;p&gt;Recently I started learning Objective-C and Cocoa framework. I thought it would be easy as I already have some experience with C# and Java. But it appears to be not that easy. Here are some notes I took to map Objective-C to C#.&lt;/p&gt;
&lt;h3&gt;Objective-C&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Weakly typed&lt;/li&gt;
&lt;li&gt;Object oriented&lt;/li&gt;
&lt;li&gt;Has manual memory management (Arc)&lt;/li&gt;
&lt;li&gt;Uses LLVM or GCC compiler&lt;/li&gt;
&lt;li&gt;Using LLVM we can combine C, C++, Objective-C code in one file&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cocoa&lt;/h3&gt;
&lt;p&gt;Three main frameworks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Foundation (Strings, Dates, etc)&lt;/li&gt;
&lt;li&gt;AppKit (UI related framework)&lt;/li&gt;
&lt;li&gt;Core Data (persistence framework)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Naming conventions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NSObject&lt;/code&gt; class names are capitalized&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dealloc&lt;/code&gt; method names are started with lowercase&lt;/li&gt;
&lt;li&gt;camelCase for local vars&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Some new info for me&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Instance variables that are pointers to other objects are called outlets. &lt;/li&gt;
&lt;li&gt;Methods that can be triggered by user interface objects are called actions.&lt;/li&gt;
&lt;li&gt;Single inheritance&lt;/li&gt;
&lt;li&gt;Objective-C keywords are prefixed with &lt;code&gt;@&lt;/code&gt; sign&lt;/li&gt;
&lt;li&gt;Option+Click on any piece of code shows docs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@&lt;/code&gt; sign before string literal means Objective-C string class &lt;code&gt;NSString&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;NSLog has printf-like syntax, but has different identifiers (&lt;code&gt;%d&lt;/code&gt;, &lt;code&gt;%qi&lt;/code&gt; for &lt;code&gt;long long&lt;/code&gt;, &lt;code&gt;hi&lt;/code&gt; for &lt;code&gt;short&lt;/code&gt;, etc)&lt;/li&gt;
&lt;li&gt;In NSLog &lt;code&gt;%@&lt;/code&gt; accepts object pointer and expands it to string by calling &lt;code&gt;[obj description]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NSObject.isEqual:anotherObject&lt;/code&gt; by default compares pointers&lt;/li&gt;
&lt;li&gt;Methods starting with &lt;code&gt;-&lt;/code&gt; are instance methods, starting with &lt;code&gt;+&lt;/code&gt; are class methods, or static methods&lt;/li&gt;
&lt;li&gt;ARC - automatic reference count is GC and can be disabled for project for manual memory management&lt;/li&gt;
&lt;li&gt;To get selector for method use macros &lt;code&gt;@selector(method-name)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Document-based application means application runs several copies of itself per opened file, like text editor. System Preferences, for example, is not a document-based application.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Some types and constants&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt; is pointer to any type of object&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOL&lt;/code&gt; is the same as &lt;code&gt;char&lt;/code&gt; but is used as Boolean&lt;/li&gt;
&lt;li&gt;&lt;code&gt;YES&lt;/code&gt; is 1, &lt;code&gt;NO&lt;/code&gt; is 0&lt;/li&gt;
&lt;li&gt;IBOutlet is a macro that avaluates to nothing. Ignore it. (&lt;code&gt;IBOutlet&lt;/code&gt; is a hint to Interface Builder).&lt;/li&gt;
&lt;li&gt;IBAction is the same as &lt;code&gt;void&lt;/code&gt;. It also acts as a hint to Interface Builder&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nil&lt;/code&gt; is the same as NULL. We use &lt;code&gt;nil&lt;/code&gt; instread of &lt;code&gt;NULL&lt;/code&gt; for poiners to objects.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NSArray&lt;/code&gt; can not have &lt;code&gt;nil&lt;/code&gt; in it&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NSArray&lt;/code&gt;, &lt;code&gt;NSNumber&lt;/code&gt; and &lt;code&gt;NSString&lt;/code&gt; are immutable&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Manual memory management rules&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If you create an object by using a method whose name starts with &lt;code&gt;alloc&lt;/code&gt; or &lt;code&gt;new&lt;/code&gt; or contains &lt;code&gt;copy&lt;/code&gt;, you have taken ownership of it. (That is, assume that the new object has a retain count of 1 and is not in the &lt;code&gt;autorelease pool&lt;/code&gt;.) You have a responsibility to release the object when you no longer need it. Some of the common methods that convey ownership are &lt;code&gt;alloc&lt;/code&gt; (which is always followed by an &lt;code&gt;init&lt;/code&gt; method), &lt;code&gt;copy&lt;/code&gt;, and &lt;code&gt;mutableCopy&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;An object created through any other means, such as a convenience method, is not owned by you. (That is, assume that it has a retain count of 1 and is already in the autorelease pool and thus doomed unless it is retained before the autorelease pool is drained.)&lt;/li&gt;
&lt;li&gt;If you don’t own an object and want to ensure its continued existence, take ownership by sending it the message retain. (This increments the retain count.)&lt;/li&gt;
&lt;li&gt;When you own an object and no longer need it, send it the message &lt;code&gt;release&lt;/code&gt; or &lt;code&gt;autorelease&lt;/code&gt;. (The message release decrements the retain count immediately; autorelease causes the message release to get sent when the &lt;code&gt;autorelease pool&lt;/code&gt; is drained.)&lt;/li&gt;
&lt;li&gt;As long as it has at least one owner, an object will continue to exist- (When its retain count goes to zero, it is sent the message &lt;code&gt;dealloc&lt;/code&gt;.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Controls&lt;/h3&gt;
&lt;h4&gt;&lt;code&gt;NSButton&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Can be oval, square, checkbox. Most common messages sent to buttons:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;setEnabled:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;BOOL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;yn&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;state&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;setState:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;aState&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;&lt;code&gt;NSSlider&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Used to select values in ranges. Can be vertical, horizontal and circular. Can send messages continiously while dragging and can send once on mouse button release. Can have markers and prevent selecting values between markers. Two most used messages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;setFloatValue:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;floatValue&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;&lt;code&gt;NSField&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Single line input field. Uneditable fields are used as labels.  &lt;code&gt;NSSecureTextField&lt;/code&gt; is subclass which is used for passwords. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;stringValue&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;setStringValue:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;aString&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;objectValue&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;setObjectValue:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;obj&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Second pair is used in case you use &lt;code&gt;NSFormatter&lt;/code&gt;s or just &lt;code&gt;description&lt;/code&gt; method of object.&lt;/p&gt;
&lt;h3&gt;temp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can programmatically set actions to methods:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;objectivec
SEL mySelector;
mySelector = @selector(drawMickey:);
[myButton setAction:mySelector];&lt;/code&gt;
- For selector at runtime from string use &lt;code&gt;NSSelectorFromString(@"drawMickey:");&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Helper objects&lt;/h3&gt;
&lt;p&gt;Many classes in the Cocoa framework have an instance variable called &lt;code&gt;delegate&lt;/code&gt;, you can set the &lt;code&gt;delegate&lt;/code&gt; outlet to point to a helper object. After some events occur class will refer to helper object. You do not need to implement all helper methods described in documentation. Unimplemented methods will be ignored.&lt;/p&gt;
&lt;p&gt;So helper object is object that implements certain protocol (&lt;code&gt;interface&lt;/code&gt; in Java).
BTW syntax of implementing protocol:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;ClassName&lt;/span&gt; : &lt;span class="nc"&gt;ParentClass&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Interface1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Interface2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// vars&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// methods&lt;/span&gt;
&lt;span class="c1"&gt;// properties&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Key-Value Coding&lt;/h3&gt;
&lt;p&gt;Similarly to to JS, we can refer to objects instance property by string key.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt; : &lt;span class="bp"&gt;NSObject&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;ends&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Student&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="nl"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;Larry&amp;quot;&lt;/span&gt; &lt;span class="nl"&gt;forKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="nl"&gt;valueForKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;KVC works in pair with binding to GUI, which does not work with direct access to variable. If there are getters and setters for variable, they will be used by methods &lt;code&gt;setValue:forKey:&lt;/code&gt; and &lt;code&gt;valueForKey:&lt;/code&gt; only if names of getter and setter satisfy convention &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;setFoo&lt;/code&gt; for property &lt;code&gt;foo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To make other methods affect to bindings, use getters-setters or KVC for changing variable.&lt;/p&gt;
&lt;h3&gt;Attributes of property&lt;/h3&gt;
&lt;p&gt;Syntax for attribute:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Types of attributes (copy-paste from book):
- &lt;code&gt;assign&lt;/code&gt; (the default) makes a simple assignment happen. This attribute is most commonly used for scalar, nonpointer types, such as integers and floating-point values.
- &lt;code&gt;strong&lt;/code&gt; says that this property is a strong reference. It keeps the object being pointed to from being deallocated while this pointer is set. It is specific to ARC code; if you are not using ARC, the retain attribute is equivalent.
- &lt;code&gt;weak&lt;/code&gt; denotes a weak reference. It is similar to assign, except that once the object being pointed to is deallocated, this property will be set to nil. It is supported only by code compiled with ARC.
- &lt;code&gt;copy&lt;/code&gt; makes a copy of the new value and assigns the variable to the copy. This attribute is often used for properties that are strings and other classes with mutable subclasses.&lt;/p&gt;
&lt;p&gt;There is also &lt;code&gt;nonatomic&lt;/code&gt; which is self-explanatory, by default getters and setters are atomic.&lt;/p&gt;
&lt;h3&gt;Key pathes&lt;/h3&gt;
&lt;p&gt;If you look better, objects create directed graph. So to any object we can find several pathes, including that starts in itself. You can use it to access variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;selectedPerson&lt;/span&gt; &lt;span class="nl"&gt;valueForKeyPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;spouse.scooter.modelName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You even can use operators in pathes such as &lt;code&gt;@avg&lt;/code&gt;, &lt;code&gt;@count&lt;/code&gt;, &lt;code&gt;@max&lt;/code&gt;, &lt;code&gt;@min&lt;/code&gt;, &lt;code&gt;@sum&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="bp"&gt;NSNumber&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;theAverage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;employees&lt;/span&gt; &lt;span class="nl"&gt;valueForKeyPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;@avg.expectedRaise&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Programmatical binding&lt;/h3&gt;
&lt;p&gt;You can bind programmatically one object to another using pathes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;textField&lt;/span&gt; &lt;span class="nl"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;value&amp;quot;&lt;/span&gt; &lt;span class="nl"&gt;toObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;employeeController&lt;/span&gt; &lt;span class="nl"&gt;withKeyPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;arrangedObjects.@avg.expectedRaise&amp;quot;&lt;/span&gt; &lt;span class="nl"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And unbind:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;textField&lt;/span&gt; &lt;span class="nl"&gt;unbind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Programmatically add observer&lt;/h3&gt;
&lt;p&gt;Similarly to C#'s &lt;code&gt;+=&lt;/code&gt; and &lt;code&gt;-=&lt;/code&gt; event operators(but less functionally reach) you can add observer for value:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;theAppDelegate&lt;/span&gt; &lt;span class="nl"&gt;addObserver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;
                 &lt;span class="nl"&gt;forKeyPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;fido&amp;quot;&lt;/span&gt;
                    &lt;span class="nl"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;NSKeyValueChangeOldKey&lt;/span&gt;
                    &lt;span class="nl"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;somePointer&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The method that is triggered looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;observeValueForKeyPath:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;keyPath&lt;/span&gt;
                      &lt;span class="nf"&gt;ofObject:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;object&lt;/span&gt;
                        &lt;span class="nf"&gt;change:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSDictionary&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;change&lt;/span&gt;
                       &lt;span class="nf"&gt;context:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;context&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;My mappings for Cocoa objects&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NSMutableArray &amp;lt;=&amp;gt; vector&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NSString &amp;lt;=&amp;gt; string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for (LotteryEntry *entryToPrint in array) &amp;lt;=&amp;gt; foreach&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NSAssert &amp;lt;=&amp;gt; assert&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interface + implementation &amp;lt;=&amp;gt; class&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protocol &amp;lt;=&amp;gt; interface&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Javascript basics</title><link href="http://devblog.me/javascript-basics.html" rel="alternate"></link><updated>2013-01-15T00:00:00-08:00</updated><author><name>Slava Kim</name></author><id>tag:devblog.me,2013-01-15:javascript-basics.html</id><summary type="html">&lt;p&gt;In last couple days I realized that I feel very uncomfortable writing Javascript code. It might be a result of lack of knowledge how does language work, all the time I just used my C knowledge combined with Python experience. One evening I decided to learn very basics of Javascript and took notes.&lt;/p&gt;
&lt;h3&gt;Data types:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Object&lt;ul&gt;
&lt;li&gt;Function&lt;/li&gt;
&lt;li&gt;Array&lt;/li&gt;
&lt;li&gt;Date&lt;/li&gt;
&lt;li&gt;RegExp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Null&lt;/li&gt;
&lt;li&gt;Undefined&lt;/li&gt;
&lt;li&gt;Error&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Numbers&lt;/h3&gt;
&lt;p&gt;Numbers by specs are "double-precision 64-bit format IEEE 754 values", so there is no integers bt specs. But browsers' implementation of numbers can differ and can implement in simple 32-bit integer type.&lt;/p&gt;
&lt;p&gt;Standard arithmetic operations are supported: +, -, *, /, %.&lt;/p&gt;
&lt;p&gt;Most math operations are achived with built-in &lt;code&gt;Math&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;To convert string to integer use &lt;code&gt;parseInt(str, base=2)&lt;/code&gt;, to float use &lt;code&gt;parseFloat(str, base=10)&lt;/code&gt;. Parsing bad string will give &lt;code&gt;NaN&lt;/code&gt;. We can convert string prepending + sign, but it works in different way, so be carefull.&lt;/p&gt;
&lt;p&gt;Anything combined with &lt;code&gt;NaN&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt; and you can check for it using &lt;code&gt;isNaN(number)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also JS has values &lt;code&gt;Infinity&lt;/code&gt; and &lt;code&gt;-Infinity&lt;/code&gt;. They are achiveable dividing by 0. Test for it using &lt;code&gt;isFinite(number)&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Strings&lt;/h3&gt;
&lt;p&gt;Strings are sequences of &lt;em&gt;unicode&lt;/em&gt; characters. To represent single char we use string of length 1.&lt;/p&gt;
&lt;p&gt;And strings are objects as well. They have properties(&lt;code&gt;length&lt;/code&gt;), methods(&lt;code&gt;replace(from, to)&lt;/code&gt;, &lt;code&gt;charAt(pos)&lt;/code&gt;).&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;null&lt;/code&gt; vs &lt;code&gt;undefined&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;null&lt;/code&gt; is an object of type &lt;code&gt;object&lt;/code&gt; that indicates a deliberate non-value.
&lt;code&gt;undefined&lt;/code&gt; is object of type &lt;code&gt;undefined&lt;/code&gt; that indicates an uninitialized value.&lt;/p&gt;
&lt;h3&gt;Boolean&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;false&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;""&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; give &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;everything else gives &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Convert to &lt;code&gt;Boolean&lt;/code&gt; using &lt;code&gt;Boolean(var)&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Variables&lt;/h3&gt;
&lt;p&gt;Declare variable using &lt;code&gt;var&lt;/code&gt; keyword. In JavaScript blocks do not have their scope. Only functions have their own scope.&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;+&lt;/code&gt; operator&lt;/h4&gt;
&lt;p&gt;Sums numbers and concatenates strings. Concatenates with string.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;3&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="mi"&gt;345&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;5&amp;quot;&lt;/span&gt;
&lt;span class="mi"&gt;75&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Comparisons&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To avoid type coercion, use the triple-equals operator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are also != and !== operators.&lt;/p&gt;
&lt;h3&gt;Control Statements&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;if&lt;/code&gt;-&lt;code&gt;else&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;-&lt;code&gt;case&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;-&lt;code&gt;while&lt;/code&gt;-&lt;code&gt;do-while&lt;/code&gt; work in the same way as in C.&lt;/p&gt;
&lt;h3&gt;Objects&lt;/h3&gt;
&lt;p&gt;Objects are key-value pairs collections. Similar to &lt;code&gt;dict&lt;/code&gt; in Python.&lt;/p&gt;
&lt;p&gt;Create empty object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// or&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And there are two ways to access properties:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Name again&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Second way gives adventages for building property name in run-time or using reserved key-words as property name:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Simon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Syntax error, because &amp;#39;for&amp;#39; is a reserved word&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;for&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Simon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// works fine&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Object initialisation syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Carrot&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;for&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Max&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;orange&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Arrays&lt;/h3&gt;
&lt;p&gt;Arrays are a spectial type type of object.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// old way&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hen&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// convinient way&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hen&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;FOX&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Looks like a.length is inefficient and instead of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;nicer is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another way to iterate though all items is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Some methods of arrays: &lt;code&gt;push(item[, itemN])&lt;/code&gt;, &lt;code&gt;pop()&lt;/code&gt;, &lt;code&gt;reverse()&lt;/code&gt;, &lt;code&gt;shift()&lt;/code&gt;, &lt;code&gt;join(sep)&lt;/code&gt;, &lt;code&gt;toString()&lt;/code&gt;, &lt;code&gt;concat(item[, itemN])&lt;/code&gt;, &lt;code&gt;slice(start, end)&lt;/code&gt;, &lt;code&gt;sort([compfn])&lt;/code&gt;, &lt;code&gt;splice(start, delcount[, itemN])&lt;/code&gt;, &lt;code&gt;unshift([item])&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Functions&lt;/h3&gt;
&lt;p&gt;Function looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Call &lt;code&gt;add()&lt;/code&gt; will be equivalent to &lt;code&gt;add(undefined, undefined)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Call &lt;code&gt;add(1,2,3)&lt;/code&gt; to &lt;code&gt;add(1,2)&lt;/code&gt;, so 3 is ignored.&lt;/p&gt;
&lt;p&gt;But function can access all arguments in &lt;code&gt;arguments&lt;/code&gt; array passed to it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So function is an object, we can assign it to anything and use anonymous functions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make call of anonymous function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Custom objects&lt;/h3&gt;
&lt;p&gt;There is no &lt;code&gt;class&lt;/code&gt; keyword, so people use bunch of different methods to create OO-classes. But simple classes are functions.&lt;/p&gt;
&lt;p&gt;Used inside a function, &lt;code&gt;this&lt;/code&gt; refers to the current object. What that actually means is specified by the way in which you called that function. If you called it using dot notation or bracket notation on an object, that object becomes &lt;code&gt;this&lt;/code&gt;. If dot notation wasn't used for the call, &lt;code&gt;this&lt;/code&gt; refers to the global object. This is a frequent cause of mistakes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fullNameReversed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;last&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Simon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Willison&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;new&lt;/code&gt; is strongly related to &lt;code&gt;this&lt;/code&gt;. What it does is it creates a brand new empty object, and then calls the function specified, with &lt;code&gt;this&lt;/code&gt; set to that new object. Functions that are designed to be called by &lt;code&gt;new&lt;/code&gt; are called constructor functions. Common practise is to capitalise these functions as a reminder to call them with &lt;code&gt;new&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Using function prototype:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fullNameReversed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;last&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It means using &lt;code&gt;prototype&lt;/code&gt; we can change classes on runtime.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reversed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Simon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;nomiS&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The prototype forms part of a chain. The root of that chain is Object.prototype, whose methods include toString() — it is this method that is called when you try to represent an object as a string. This is useful for debugging our Person objects:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Simon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Willison&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;Person: &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Simon&lt;/span&gt; &lt;span class="nx"&gt;Willison&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Inner functions&lt;/h3&gt;
&lt;p&gt;We can declare function inside function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Inner functions share namespace of parent function.&lt;/p&gt;
&lt;h3&gt;Closures&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeAdder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeAdder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeAdder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;27&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here's what's actually happening. Whenever JavaScript executes a function, a 'scope' object is created to hold the local variables created within that function. It is initialised with any variables passed in as function parameters. This is similar to the global object that all global variables and functions live in, but with a couple of important differences: firstly, a brand new scope object is created every time a function starts executing, and secondly, unlike the global object (which in browsers is accessible as window) these scope objects cannot be directly accessed from your JavaScript code. There is no mechanism for iterating over the properties of the current scope object for example.&lt;/p&gt;
&lt;p&gt;So when makeAdder is called, a scope object is created with one property: a, which is the argument passed to the makeAdder function. makeAdder then returns a newly created function. Normally JavaScript's garbage collector would clean up the scope object created for makeAdder at this point, but the returned function maintains a reference back to that scope object. As a result, the scope object will not be garbage collected until there are no more references to the function object that makeAdder returned.&lt;/p&gt;
&lt;p&gt;Scope objects form a chain called the scope chain, similar to the prototype chain used by JavaScript's object system.&lt;/p&gt;
&lt;p&gt;A closure is the combination of a function and the scope object in which it was created.&lt;/p&gt;
&lt;p&gt;Closures let you save state — as such, they can often be used in place of objects.
&lt;a href="https://developer.mozilla.org/en-US/docs/JavaScript/A_re-introduction_to_JavaScript?redirectlocale=en-US&amp;amp;redirectslug=A_re-introduction_to_JavaScript"&gt;Source&lt;/a&gt; is the article on developers.mozilla.org&lt;/p&gt;</summary></entry></feed>